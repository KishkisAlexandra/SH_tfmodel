# app.py
import streamlit as st
import pandas as pd
import plotly.express as px

st.set_page_config(page_title="Utility Benchmark ‚Äî –¥–∞—à–±–æ—Ä–¥", page_icon="üè†", layout="wide")

# ------------------------
# –í—ã–±–æ—Ä —Ä–µ–≥–∏–æ–Ω–∞
# ------------------------
REGIONS = ["–ë–µ–ª–∞—Ä—É—Å—å", "–ö–∏–ø—Ä"]
region = st.sidebar.selectbox("üåç –†–µ–≥–∏–æ–Ω", REGIONS, index=0)

# ------------------------
# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ —Ç–∞—Ä–∏—Ñ—ã
# ------------------------
SCENARIOS = {"–≠–∫–æ–Ω–æ–º–Ω—ã–π": 0.85, "–°—Ä–µ–¥–Ω–∏–π": 1.0, "–†–∞—Å—Ç–æ—á–∏—Ç–µ–ª—å–Ω—ã–π": 1.25}

DEFAULT_COEFFS = {
    "elec_base_kWh": 60.0,
    "elec_per_person_kWh": 75.0,
    "elec_per_m2_kWh": 0.5,
    "water_per_person_m3": 4.5,
    "hot_water_fraction": 0.6,
    "heating_Gcal_per_m2_season_mid": 0.15,
    "heating_season_months": 7.0
}

HOUSE_COEFS = {
    "–ù–æ–≤—ã–π": {"heating": 1.0, "electricity": 1.0},
    "–°—Ä–µ–¥–Ω–∏–π": {"heating": 1.05, "electricity": 1.05},
    "–°—Ç–∞—Ä—ã–π": {"heating": 1.1, "electricity": 1.05},
}

REALISM_UPLIFT = 1.07

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤
CATEGORIES = [
    "–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è", "–í–æ–¥–∞", "–ö–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è", "–û—Ç–æ–ø–ª–µ–Ω–∏–µ",
    "–ò–Ω—Ç–µ—Ä–Ω–µ—Ç", "–¢–µ–ª–µ—Ñ–æ–Ω", "IPTV", "–°–µ—Ä–≤–∏—Å", "–§–∏–∫—Å. –ø–ª–∞—Ç–µ–∂–∏"
]

HEATING_MONTHS = [1, 2, 3, 4, 10, 11, 12]

# ------------------------
# –¢–∞—Ä–∏—Ñ—ã
# ------------------------
TARIFFS = {
    "–ë–µ–ª–∞—Ä—É—Å—å": {
        "electricity": 0.2412,     # BYN / kWh
        "water": 1.7858,           # BYN / m¬≥
        "sewage": 0.9586,          # BYN / m¬≥
        "heating": 24.7187,        # BYN / Gcal
        "fixed": 5.0,              # BYN / –º–µ—Å
        "internet": 0.0,
        "phone": 0.0,
        "iptv": 0.0,
        "service": 0.0
    },
    "–ö–∏–ø—Ä": {
        "electricity": 0.2661,     # EUR / kWh
        "water": 1.3248,           # EUR / m¬≥
        "sewage": 1.0,             # EUR / m¬≥ (—É—Å–ª–æ–≤–Ω–æ)
        "heating": 0.0,            # –Ω–µ—Ç —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –æ—Ç–æ–ø–ª–µ–Ω–∏—è
        "fixed": 0.0,
        "internet": 20.0,          # EUR / –º–µ—Å
        "phone": 20.0,             # EUR / –º–µ—Å
        "iptv": 10.0,              # EUR / –º–µ—Å
        "service": 45.0            # EUR / –º–µ—Å (Service Min)
    }
}

currency = "BYN" if region == "–ë–µ–ª–∞—Ä—É—Å—å" else "EUR"

# ------------------------
# –§—É–Ω–∫—Ü–∏–∏ —Ä–∞—Å—á—ë—Ç–∞
# ------------------------
def calculate_volumes(area_m2, occupants, behavior_factor, coeffs=DEFAULT_COEFFS, month=1):
    elec = (coeffs["elec_base_kWh"] + coeffs["elec_per_person_kWh"]*occupants +
            coeffs["elec_per_m2_kWh"]*area_m2) * behavior_factor
    water = coeffs["water_per_person_m3"]*occupants*behavior_factor
    hot_water = water * coeffs["hot_water_fraction"]
    sewage = water
    if month in HEATING_MONTHS:
        G_mid = coeffs["heating_Gcal_per_m2_season_mid"] * area_m2
        heat_monthly = G_mid / coeffs["heating_season_months"]
    else:
        heat_monthly = 0.0
    return {
        "–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è": round(elec, 1),
        "–í–æ–¥–∞": round(water, 2),
        "–ì–æ—Ä—è—á–∞—è –≤–æ–¥–∞": round(hot_water, 2),
        "–ö–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è": round(sewage, 2),
        "–û—Ç–æ–ø–ª–µ–Ω–∏–µ": round(heat_monthly, 3)
    }

def calculate_costs_from_volumes(volumes, tariffs, area_m2=50, occupants=1, floor=1, has_elevator=True):
    elec_cost = volumes["–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è"] * tariffs["electricity"]
    water_cost = volumes["–í–æ–¥–∞"] * tariffs["water"]
    sewage_cost = volumes["–ö–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è"] * tariffs["sewage"]
    heat_cost = volumes["–û—Ç–æ–ø–ª–µ–Ω–∏–µ"] * tariffs["heating"]

    # –ë–µ–ª–∞—Ä—É—Å—å: —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏ –ø–æ –ø–ª–æ—â–∞–¥–∏ –∏ –ª—é–¥—è–º
    if region == "–ë–µ–ª–∞—Ä—É—Å—å":
        maintenance_max = 0.0388
        lighting_max = 0.0249
        waste_norm = 0.2092
        elevator_max = 0.88
        capital_repair_rate = 0.05

        maintenance_cost = area_m2 * maintenance_max
        lighting_cost = area_m2 * lighting_max
        waste_cost = waste_norm * occupants
        capital_repair_cost = area_m2 * capital_repair_rate
        elevator_cost = elevator_max * occupants if has_elevator and floor >= 2 else 0.0
        fixed_cost = tariffs["fixed"] + maintenance_cost + lighting_cost + waste_cost + capital_repair_cost + elevator_cost
    else:
        fixed_cost = tariffs["fixed"]

    internet_cost = tariffs["internet"]
    phone_cost = tariffs["phone"]
    iptv_cost = tariffs["iptv"]
    service_cost = tariffs["service"]

    costs = {
        "–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è": round(elec_cost, 2),
        "–í–æ–¥–∞": round(water_cost, 2),
        "–ö–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è": round(sewage_cost, 2),
        "–û—Ç–æ–ø–ª–µ–Ω–∏–µ": round(heat_cost, 2),
        "–ò–Ω—Ç–µ—Ä–Ω–µ—Ç": round(internet_cost, 2),
        "–¢–µ–ª–µ—Ñ–æ–Ω": round(phone_cost, 2),
        "IPTV": round(iptv_cost, 2),
        "–°–µ—Ä–≤–∏—Å": round(service_cost, 2),
        "–§–∏–∫—Å. –ø–ª–∞—Ç–µ–∂–∏": round(fixed_cost, 2)
    }
    costs["–ò—Ç–æ–≥–æ"] = round(sum(costs.values()), 2)
    return costs

def apply_neighbor_adjustment(volumes, tariffs, house_category, area_m2, occupants, floor=1, has_elevator=True):
    coefs = HOUSE_COEFS.get(house_category, {"heating":1.0,"electricity":1.0})
    vol_adj = volumes.copy()
    vol_adj["–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è"] = vol_adj["–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è"] * coefs["electricity"]
    vol_adj["–û—Ç–æ–ø–ª–µ–Ω–∏–µ"] = vol_adj["–û—Ç–æ–ø–ª–µ–Ω–∏–µ"] * coefs["heating"]
    neighbor_costs = calculate_costs_from_volumes(vol_adj, tariffs, area_m2, occupants, floor, has_elevator)
    neighbor_costs = {k: round(v * REALISM_UPLIFT, 2) for k, v in neighbor_costs.items()}
    return neighbor_costs

# ------------------------
# Sidebar: –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–µ–º—å–∏
# ------------------------
st.sidebar.header("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–µ–º—å–∏")
month = st.sidebar.selectbox("–ú–µ—Å—è—Ü", list(range(1,13)),
                             format_func=lambda x: ["–Ø–Ω–≤","–§–µ–≤","–ú–∞—Ä","–ê–ø—Ä","–ú–∞–π","–ò—é–Ω","–ò—é–ª","–ê–≤–≥","–°–µ–Ω","–û–∫—Ç","–ù–æ—è","–î–µ–∫"][x-1])
area_m2 = st.sidebar.number_input("–ü–ª–æ—â–∞–¥—å, –º¬≤", 10.0, 500.0, 90.0)
adults = st.sidebar.number_input("–í–∑—Ä–æ—Å–ª—ã–µ", 0,10,2)
children = st.sidebar.number_input("–î–µ—Ç–∏", 0,10,2)
occupants = adults + children

scenario = st.sidebar.selectbox("–°—Ü–µ–Ω–∞—Ä–∏–π –ø–æ–≤–µ–¥–µ–Ω–∏—è", list(SCENARIOS.keys()), index=1)
behavior_factor = SCENARIOS[scenario]
house_category = st.sidebar.selectbox("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ–º–∞", list(HOUSE_COEFS.keys()), index=1)

# –õ—å–≥–æ—Ç—ã –¥–ª—è –ë–µ–ª–∞—Ä—É—Å–∏
st.sidebar.markdown("---")
if region == "–ë–µ–ª–∞—Ä—É—Å—å":
    use_subsidy = st.sidebar.checkbox("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª—å–≥–æ—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∫ —Å—É–±—Å–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É)")
    if use_subsidy:
        subsidy_rate = st.sidebar.slider("–î–æ–ª—è –æ—Ç –ø–æ–ª–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞", 0.0, 1.0, 0.2, 0.05)
    else:
        subsidy_rate = 1.0
else:
    subsidy_rate = 1.0

# ------------------------
# –í–≤–æ–¥ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤
# ------------------------
st.header(f"üìä –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ —Ä–µ–∞–ª—å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ –º–µ—Å—è—Ü ({currency})")
with st.expander("–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—è –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞"):
    user_real = {}
    for c in CATEGORIES:
        user_real[c] = st.number_input(f"{c} ({currency})", min_value=0.0, value=0.0, step=1.0, format="%.2f")
user_real["–ò—Ç–æ–≥–æ"] = round(sum(user_real[k] for k in CATEGORIES), 2)

# ------------------------
# –†–∞—Å—á—ë—Ç –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ –∏ —Å—Ä–µ–¥–Ω–µ–≥–æ —Å–æ—Å–µ–¥–∞
# ------------------------
tariffs = TARIFFS[region]

ideal_vol = calculate_volumes(area_m2, occupants, 1.0, month=month)
ideal_costs = calculate_costs_from_volumes(ideal_vol, tariffs, area_m2, occupants)

neighbor_vol = calculate_volumes(area_m2, occupants, behavior_factor, month=month)
neighbor_tariffs = tariffs.copy()
if region == "–ë–µ–ª–∞—Ä—É—Å—å":
    neighbor_tariffs["electricity"] *= subsidy_rate
    neighbor_tariffs["heating"] *= subsidy_rate

neighbor_costs = apply_neighbor_adjustment(neighbor_vol, neighbor_tariffs, house_category, area_m2, occupants)

# ------------------------
# –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤
# ------------------------
st.header("üè† –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–æ–≤")
col1, col2 = st.columns([2, 1])

with col1:
    st.metric(f"–ò–¥–µ–∞–ª—å–Ω—ã–π —Ä–∞—Å—á—ë—Ç ({currency})", f"{ideal_costs['–ò—Ç–æ–≥–æ']:.2f}")
    st.metric(f"–í–∞—à–∏ —Ä–µ–∞–ª—å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã ({currency})", f"{user_real['–ò—Ç–æ–≥–æ']:.2f}")
    st.metric(f"–°—Ä–µ–¥–Ω–∏–π —Å–æ—Å–µ–¥ ({currency})", f"{neighbor_costs['–ò—Ç–æ–≥–æ']:.2f}")

    ideal_total = ideal_costs.get("–ò—Ç–æ–≥–æ", 0.0)
    neighbor_total = neighbor_costs.get("–ò—Ç–æ–≥–æ", 0.0)
    real_total = user_real["–ò—Ç–æ–≥–æ"]

    diff_real = round((real_total/ideal_total-1)*100,1) if ideal_total>0 else 0.0
    diff_neighbor = round((real_total/neighbor_total-1)*100,1) if neighbor_total>0 else 0.0

    st.info(f"–í–∞—à–∏ —Ä–µ–∞–ª—å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ {diff_real}% {'–≤—ã—à–µ' if diff_real>0 else '–Ω–∏–∂–µ'} –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞—Å—á—ë—Ç–∞.")
    st.info(f"–í–∞—à–∏ —Ä–µ–∞–ª—å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ {diff_neighbor}% {'–≤—ã—à–µ' if diff_neighbor>0 else '–Ω–∏–∂–µ'} —Å—Ä–µ–¥–Ω–µ–≥–æ —Å–æ—Å–µ–¥–∞.")

with col2:
    detail_df = pd.DataFrame({
        "–ö–∞—Ç–µ–≥–æ—Ä–∏—è": CATEGORIES,
        f"–ò–¥–µ–∞–ª—å–Ω—ã–π —Ä–∞—Å—á—ë—Ç ({currency})": [ideal_costs.get(c,0) for c in CATEGORIES],
        f"–í–∞—à–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ ({currency})": [user_real.get(c,0) for c in CATEGORIES],
        f"–°—Ä–µ–¥–Ω–∏–π —Å–æ—Å–µ–¥ ({currency})": [neighbor_costs.get(c,0) for c in CATEGORIES],
    })

    st.dataframe(detail_df, height=350)

# ------------------------
# –ì—Ä–∞—Ñ–∏–∫ —Ä–∞—Å—Ö–æ–¥–æ–≤
# ------------------------
plot_df = pd.DataFrame({
    "–ö–∞—Ç–µ–≥–æ—Ä–∏—è": CATEGORIES * 3,
    "–¢–∏–ø": (["–ò–¥–µ–∞–ª—å–Ω—ã–π —Ä–∞—Å—á—ë—Ç"] * len(CATEGORIES)) + (["–í–∞—à–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"] * len(CATEGORIES)) + (["–°—Ä–µ–¥–Ω–∏–π —Å–æ—Å–µ–¥"] * len(CATEGORIES)),
    "–°—É–º–º–∞": [ideal_costs.get(c,0) for c in CATEGORIES] +
             [user_real.get(c,0) for c in CATEGORIES] +
             [neighbor_costs.get(c,0) for c in CATEGORIES]
})
fig = px.bar(plot_df, x="–ö–∞—Ç–µ–≥–æ—Ä–∏—è", y="–°—É–º–º–∞", color="–¢–∏–ø", barmode="group",
             text="–°—É–º–º–∞")
fig.update_traces(texttemplate='%{text:.2f}', textposition='outside')
fig.update_layout(yaxis_title=f"{currency} / –º–µ—Å—è—Ü", legend_title_text="–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å", uniformtext_minsize=8)
st.plotly_chart(fig, use_container_width=True)

# ------------------------
# –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
# ------------------------
st.header("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
emoji_map = {
    "–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è":"üí°","–í–æ–¥–∞":"üö∞","–û—Ç–æ–ø–ª–µ–Ω–∏–µ":"üî•","–ö–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è":"üíß",
    "–ò–Ω—Ç–µ—Ä–Ω–µ—Ç":"üåê","–¢–µ–ª–µ—Ñ–æ–Ω":"üìû","IPTV":"üì∫","–°–µ—Ä–≤–∏—Å":"üè¢"
}
tips_map = {
    "–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è":"–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç–Ω–µ—Ä–≥–æ—Å–±–µ—Ä–µ–≥–∞—é—â–∏–µ –ª–∞–º–ø—ã –∏ –ø—Ä–∏–±–æ—Ä—ã.",
    "–í–æ–¥–∞":"—É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∞—ç—Ä–∞—Ç–æ—Ä—ã –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç—Ä—É–±—ã –Ω–∞ –ø—Ä–æ—Ç–µ—á–∫–∏.",
    "–û—Ç–æ–ø–ª–µ–Ω–∏–µ":"–∑–∞–∫—Ä—ã–≤–∞–π—Ç–µ –æ–∫–Ω–∞ –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–µ—Ä–º–æ—Ä–µ–≥—É–ª—è—Ç–æ—Ä—ã.",
    "–ö–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è":"–∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–π—Ç–µ —Ä–∞—Å—Ö–æ–¥ –≤–æ–¥—ã –∏ –∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç—å —Å–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∏.",
    "–ò–Ω—Ç–µ—Ä–Ω–µ—Ç":"–ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ –µ—Å—Ç—å –¥–µ—à–µ–≤–ª–µ.",
    "–¢–µ–ª–µ—Ñ–æ–Ω":"–æ—Ç–∫–ª—é—á–∏—Ç–µ –Ω–µ–Ω—É–∂–Ω—ã–µ –æ–ø—Ü–∏–∏ –∏–ª–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –ø–∞–∫–µ—Ç.",
    "IPTV":"–ø–æ–¥—É–º–∞–π—Ç–µ, –Ω—É–∂–Ω—ã –ª–∏ –≤—Å–µ –ø–∞–∫–µ—Ç—ã –∫–∞–Ω–∞–ª–æ–≤.",
    "–°–µ—Ä–≤–∏—Å":"—É—Ç–æ—á–Ω–∏—Ç–µ –ø–µ—Ä–µ—á–µ–Ω—å —É—Å–ª—É–≥ —É —É–ø—Ä–∞–≤–ª—è—é—â–µ–π –∫–æ–º–ø–∞–Ω–∏–∏."
}
def get_color(diff):
    return "#FFCDD2" if diff > 0 else "#C8E6C9"

cols = st.columns(4)
for i, cat in enumerate(["–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è","–í–æ–¥–∞","–û—Ç–æ–ø–ª–µ–Ω–∏–µ","–ö–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è"]):
    diff = user_real.get(cat,0) - ideal_costs.get(cat,0)
    percent_over = round(diff/ideal_costs.get(cat,1)*100,1) if ideal_costs.get(cat,0)>0 else 0
    msg = f"–ü–µ—Ä–µ—Ä–∞—Å—Ö–æ–¥ {percent_over}% ‚Äî {tips_map[cat]}" if diff > 0 else "–†–∞—Å—Ö–æ–¥ –≤ –Ω–æ—Ä–º–µ"
    with cols[i]:
        st.markdown(f"""
            <div style='padding:12px; border-radius:10px; background-color:{get_color(diff)};
                        font-size:0.9em; text-align:center;'>
                <div style='font-size:1.5em'>{emoji_map[cat]}</div>
                <strong>{cat}</strong>
                <div style='margin-top:6px'>{msg}</div>
            </div>
        """, unsafe_allow_html=True)
