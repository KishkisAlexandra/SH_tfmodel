import streamlit as st
import pandas as pd
import plotly.express as px

st.set_page_config(
    page_title="Utility Benchmark Dashboard",
    page_icon="üè†",
    layout="wide"
)

# ---- –¢–∏–ø–æ–≤—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏ ----
profiles = {
    "–û–¥–∏–Ω–æ–∫–∏–π –∂–∏—Ç–µ–ª—å": {"factor": 0.8},
    "–ü–∞—Ä–∞": {"factor": 0.95},
    "–°–µ–º—å—è —Å –¥–µ—Ç—å–º–∏": {"factor": 1.1},
    "–ë–æ–ª—å—à–∞—è —Å–µ–º—å—è": {"factor": 1.2}
}

DEFAULT_TARIFFS = {
    "electricity_BYN_per_kWh": 0.254,
    "water_BYN_per_m3": 1.7858,
    "sewage_BYN_per_m3": 0.9586,
    "heating_BYN_per_Gcal": 135.0,
    "fixed_fees_BYN": 5.0
}

DEFAULT_COEFFS = {
    "elec_base_kWh": 40.0,
    "elec_per_person_kWh": 35.0,
    "elec_per_m2_kWh": 0.25,
    "water_per_person_m3": 3.5,
    "hot_water_fraction": 0.45,
    "heating_Gcal_per_m2_season_mid": 0.10,
    "heating_season_months": 7.0
}

# ---- –§—É–Ω–∫—Ü–∏–∏ ----
def calculate_volumes(area_m2, occupants, factor, coeffs=DEFAULT_COEFFS, month=1):
    elec = (coeffs["elec_base_kWh"] +
            coeffs["elec_per_person_kWh"]*occupants +
            coeffs["elec_per_m2_kWh"]*area_m2) * factor
    water = coeffs["water_per_person_m3"]*occupants*factor
    sewage = water
    # –æ—Ç–æ–ø–ª–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ —Å –∞–ø—Ä–µ–ª—è –ø–æ –æ–∫—Ç—è–±—Ä—å
    if 4 <= month <= 10:
        heat_monthly = 0
    else:
        G_mid = coeffs["heating_Gcal_per_m2_season_mid"]*area_m2
        heat_monthly = G_mid / coeffs["heating_season_months"]
    return {
        "electricity_kWh": round(elec,1),
        "water_m3": round(water,2),
        "sewage_m3": round(sewage,2),
        "heating_Gcal_month_mid": round(heat_monthly,3)
    }

def calculate_costs(volumes, tariffs):
    elec_cost = volumes["electricity_kWh"]*tariffs["electricity_BYN_per_kWh"]
    water_cost = volumes["water_m3"]*tariffs["water_BYN_per_m3"]
    sewage_cost = volumes["sewage_m3"]*tariffs["sewage_BYN_per_m3"]
    heat_cost = volumes["heating_Gcal_month_mid"]*tariffs["heating_BYN_per_Gcal"]
    fixed = tariffs.get("fixed_fees_BYN",0)
    costs = {
        "–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è": round(elec_cost,2),
        "–í–æ–¥–∞": round(water_cost,2),
        "–ö–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è": round(sewage_cost,2),
        "–û—Ç–æ–ø–ª–µ–Ω–∏–µ": round(heat_cost,2),
        "–§–∏–∫—Å. –ø–ª–∞—Ç–µ–∂–∏": round(fixed,2)
    }
    costs["–ò—Ç–æ–≥–æ"] = round(sum(costs.values()),2)
    return costs

# ---- Sidebar ----
with st.sidebar:
    st.header("–í–∞—à–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
    month = st.selectbox("–ú–µ—Å—è—Ü", list(range(1,13)), format_func=lambda x:
                         ["–Ø–Ω–≤","–§–µ–≤","–ú–∞—Ä","–ê–ø—Ä","–ú–∞–π","–ò—é–Ω","–ò—é–ª","–ê–≤–≥","–°–µ–Ω","–û–∫—Ç","–ù–æ—è","–î–µ–∫"][x-1])
    area_m2 = st.number_input("–ü–ª–æ—â–∞–¥—å, –º¬≤", min_value=10.0, max_value=500.0, value=80.0)
    occupants = st.number_input("–ß–∏—Å–ª–æ –∂–∏–ª—å—Ü–æ–≤", min_value=1, max_value=10, value=4)
    profile_name = st.selectbox("–°—Ä–∞–≤–Ω–∏—Ç—å —Å –ø—Ä–æ—Ñ–∏–ª–µ–º", list(profiles.keys()), index=3)

# ---- –†–∞—Å—á—ë—Ç—ã ----
user_volumes = calculate_volumes(area_m2, occupants, 1.0, month=month)
user_costs = calculate_costs(user_volumes, DEFAULT_TARIFFS)

typical_volumes = calculate_volumes(area_m2, occupants, profiles[profile_name]["factor"], month=month)
typical_costs = calculate_costs(typical_volumes, DEFAULT_TARIFFS)

# ---- –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ ----
st.title("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è")

diff = user_costs["–ò—Ç–æ–≥–æ"] - typical_costs["–ò—Ç–æ–≥–æ"]
percent = (diff / typical_costs["–ò—Ç–æ–≥–æ"]) * 100

if diff > 0:
    verdict = f"–í–∞—à–∏ —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ **{percent:.1f}% –≤—ã—à–µ**, —á–µ–º —É —Ç–∏–ø–æ–≤–æ–≥–æ –¥–æ–º–æ—Ö–æ–∑—è–π—Å—Ç–≤–∞."
    advice = "üí° –ï—Å—Ç—å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏."
else:
    verdict = f"–í–∞—à–∏ —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ **{-percent:.1f}% –Ω–∏–∂–µ**, —á–µ–º —É —Ç–∏–ø–æ–≤–æ–≥–æ –¥–æ–º–æ—Ö–æ–∑—è–π—Å—Ç–≤–∞."
    advice = "‚úÖ –í—ã —Ç—Ä–∞—Ç–∏—Ç–µ –º–µ–Ω—å—à–µ, —á–µ–º –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ."

st.markdown(f"""
### –ú—ã —Å—Ä–∞–≤–Ω–∏–ª–∏ –≤–∞—Å —Å –ø—Ä–æ—Ñ–∏–ª–µ–º: **{profile_name}**

- –í–∞—à —Å—á—ë—Ç: **{user_costs['–ò—Ç–æ–≥–æ']} BYN**
- –¢–∏–ø–æ–≤–æ–π —Å—á—ë—Ç: **{typical_costs['–ò—Ç–æ–≥–æ']} BYN**

**–ê–Ω–∞–ª–∏—Ç–∏–∫–∞:**  
{verdict}  
{advice}
""")

# ---- –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è ----
st.subheader("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")

df_compare = pd.DataFrame({
    "–ö–∞—Ç–µ–≥–æ—Ä–∏—è": list(user_costs.keys())[:-1],
    "–í–∞—à–∏ —Ä–∞—Å—Ö–æ–¥—ã": list(user_costs.values())[:-1],
    "–¢–∏–ø–æ–≤—ã–µ —Ä–∞—Å—Ö–æ–¥—ã": list(typical_costs.values())[:-1]
})

df_melted = df_compare.melt(id_vars="–ö–∞—Ç–µ–≥–æ—Ä–∏—è", var_name="–¢–∏–ø", value_name="BYN")

fig = px.bar(
    df_melted,
    x="–ö–∞—Ç–µ–≥–æ—Ä–∏—è", y="BYN",
    color="–¢–∏–ø",
    barmode="group",
    text="BYN",
    color_discrete_map={"–í–∞—à–∏ —Ä–∞—Å—Ö–æ–¥—ã": "royalblue", "–¢–∏–ø–æ–≤—ã–µ —Ä–∞—Å—Ö–æ–¥—ã": "orange"}
)

fig.update_layout(height=500)
st.plotly_chart(fig, use_container_width=True)
