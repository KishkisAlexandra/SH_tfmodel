# app.py
import streamlit as st
import pandas as pd
import plotly.express as px

st.set_page_config(page_title="Utility Benchmark ‚Äî –¥–∞—à–±–æ—Ä–¥", page_icon="üè†", layout="wide")

# ------------------------
# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
# ------------------------
SCENARIOS = {"–≠–∫–æ–Ω–æ–º–Ω—ã–π": 0.85, "–°—Ä–µ–¥–Ω–∏–π": 1.0, "–†–∞—Å—Ç–æ—á–∏—Ç–µ–ª—å–Ω—ã–π": 1.25}

DEFAULT_COEFFS = {
    "elec_base_kWh": 60.0,
    "elec_per_person_kWh": 75.0,
    "elec_per_m2_kWh": 0.5,
    "water_per_person_m3": 4.5,
    "hot_water_fraction": 0.6,
    "heating_Gcal_per_m2_season_mid": 0.15,
    "heating_season_months": 7.0
}

HOUSE_COEFS = {
    "–ù–æ–≤—ã–π": {"heating": 1.0, "electricity": 1.0},
    "–°—Ä–µ–¥–Ω–∏–π": {"heating": 1.05, "electricity": 1.05},
    "–°—Ç–∞—Ä—ã–π": {"heating": 1.1, "electricity": 1.05},
}

REALISM_UPLIFT = 1.07
CATEGORIES = ["–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è", "–í–æ–¥–∞", "–ö–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è", "–û—Ç–æ–ø–ª–µ–Ω–∏–µ", "–§–∏–∫—Å. –ø–ª–∞—Ç–µ–∂–∏"]
HEATING_MONTHS = [1,2,3,4,10,11,12]

# ------------------------
# –¢–∞—Ä–∏—Ñ—ã
# ------------------------
SUBSIDIZED_TARIFFS = {
    "electricity_BYN_per_kWh": 0.2412,
    "heating_BYN_per_Gcal": 24.7187
}

FULL_TARIFFS = {
    "electricity_BYN_per_kWh": 0.2969,
    "heating_BYN_per_Gcal": 134.94
}

# –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã (–≤–æ–¥–∞, –∫–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è, —Ñ–∏–∫—Å.–ø–ª–∞—Ç–µ–∂–∏)
DEFAULT_TARIFFS = {
    "water_BYN_per_m3": 1.7858,
    "sewage_BYN_per_m3": 0.9586,
    "fixed_fees_BYN": 5.0
}

# ------------------------
# –§—É–Ω–∫—Ü–∏–∏ —Ä–∞—Å—á—ë—Ç–∞
# ------------------------
def calculate_volumes(area_m2, occupants, behavior_factor, coeffs=DEFAULT_COEFFS, month=1):
    elec = (coeffs["elec_base_kWh"] + coeffs["elec_per_person_kWh"]*occupants +
            coeffs["elec_per_m2_kWh"]*area_m2) * behavior_factor
    water = coeffs["water_per_person_m3"]*occupants*behavior_factor
    hot_water = water * coeffs["hot_water_fraction"]
    sewage = water
    if month in HEATING_MONTHS:
        G_mid = coeffs["heating_Gcal_per_m2_season_mid"] * area_m2
        heat_monthly = G_mid / coeffs["heating_season_months"]
    else:
        heat_monthly = 0.0
    return {
        "–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è": round(elec,1),
        "–í–æ–¥–∞": round(water,2),
        "–ì–æ—Ä—è—á–∞—è –≤–æ–¥–∞": round(hot_water,2),
        "–ö–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è": round(sewage,2),
        "–û—Ç–æ–ø–ª–µ–Ω–∏–µ": round(heat_monthly,3)
    }

def calculate_costs_from_volumes(volumes, tariffs, area_m2=50, occupants=1, floor=1, has_elevator=True):
    elec_cost = volumes["–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è"] * tariffs["electricity_BYN_per_kWh"]
    water_cost = volumes["–í–æ–¥–∞"] * tariffs["water_BYN_per_m3"]
    sewage_cost = volumes["–ö–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è"] * tariffs["sewage_BYN_per_m3"]
    heat_cost = volumes["–û—Ç–æ–ø–ª–µ–Ω–∏–µ"] * tariffs["heating_BYN_per_Gcal"]

    # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏
    maintenance_max = 0.0388
    lighting_max = 0.0249
    waste_norm = 0.2092
    elevator_max = 0.88
    capital_repair_rate = 0.05

    maintenance_cost = area_m2 * maintenance_max
    lighting_cost = area_m2 * lighting_max
    waste_cost = waste_norm * occupants
    capital_repair_cost = area_m2 * capital_repair_rate
    elevator_cost = elevator_max * occupants if has_elevator and floor >= 2 else 0.0

    fixed = maintenance_cost + lighting_cost + waste_cost + capital_repair_cost + elevator_cost

    costs = {
        "–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è": round(elec_cost,2),
        "–í–æ–¥–∞": round(water_cost,2),
        "–ö–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è": round(sewage_cost,2),
        "–û—Ç–æ–ø–ª–µ–Ω–∏–µ": round(heat_cost,2),
        "–§–∏–∫—Å. –ø–ª–∞—Ç–µ–∂–∏": round(fixed,2)
    }
    costs["–ò—Ç–æ–≥–æ"] = round(sum(costs.values()),2)
    return costs

def apply_neighbor_adjustment(volumes, tariffs, house_category, area_m2, occupants, floor=1, has_elevator=True):
    coefs = HOUSE_COEFS.get(house_category, {"heating":1.0,"electricity":1.0})
    vol_adj = volumes.copy()
    vol_adj["–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è"] = vol_adj["–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è"] * coefs["electricity"]
    vol_adj["–û—Ç–æ–ø–ª–µ–Ω–∏–µ"] = vol_adj["–û—Ç–æ–ø–ª–µ–Ω–∏–µ"] * coefs["heating"]
    neighbor_costs = calculate_costs_from_volumes(vol_adj, tariffs, area_m2, occupants, floor, has_elevator)
    neighbor_costs = {k: round(v * REALISM_UPLIFT, 2) for k, v in neighbor_costs.items()}
    return neighbor_costs

# ------------------------
# Sidebar: –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–µ–º—å–∏
# ------------------------
st.sidebar.header("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–µ–º—å–∏")
month = st.sidebar.selectbox("–ú–µ—Å—è—Ü", list(range(1,13)),
                             format_func=lambda x: ["–Ø–Ω–≤","–§–µ–≤","–ú–∞—Ä","–ê–ø—Ä","–ú–∞–π","–ò—é–Ω","–ò—é–ª","–ê–≤–≥","–°–µ–Ω","–û–∫—Ç","–ù–æ—è","–î–µ–∫"][x-1])
area_m2 = st.sidebar.number_input("–ü–ª–æ—â–∞–¥—å, –º¬≤", 10.0, 500.0, 90.0)
adults = st.sidebar.number_input("–í–∑—Ä–æ—Å–ª—ã–µ", 0,10,2)
children = st.sidebar.number_input("–î–µ—Ç–∏", 0,10,2)
occupants = adults + children

scenario = st.sidebar.selectbox("–°—Ü–µ–Ω–∞—Ä–∏–π –ø–æ–≤–µ–¥–µ–Ω–∏—è", list(SCENARIOS.keys()), index=1)
behavior_factor = SCENARIOS[scenario]
house_category = st.sidebar.selectbox("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ–º–∞", list(HOUSE_COEFS.keys()), index=1)

# ------------------------
# –í—ã–±–æ—Ä —Ç–∞—Ä–∏—Ñ–æ–≤
# ------------------------
st.sidebar.markdown("---")
use_subsidy = st.sidebar.checkbox("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª—å–≥–æ—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ –¥–ª—è —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö –ª–∏—Ü", value=True)

tariffs = DEFAULT_TARIFFS.copy()
if use_subsidy:
    tariffs["electricity_BYN_per_kWh"] = SUBSIDIZED_TARIFFS["electricity_BYN_per_kWh"]
    tariffs["heating_BYN_per_Gcal"] = SUBSIDIZED_TARIFFS["heating_BYN_per_Gcal"]
else:
    tariffs["electricity_BYN_per_kWh"] = FULL_TARIFFS["electricity_BYN_per_kWh"]
    tariffs["heating_BYN_per_Gcal"] = FULL_TARIFFS["heating_BYN_per_Gcal"]

# ------------------------
# –í–≤–æ–¥ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤
# ------------------------
st.header("üìä –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ —Ä–µ–∞–ª—å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ –º–µ—Å—è—Ü (BYN)")
with st.expander("–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—è –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞"):
    user_real = {
        "–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è": st.number_input("–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è BYN", min_value=0.0, value=0.0, step=1.0, format="%.2f"),
        "–í–æ–¥–∞": st.number_input("–í–æ–¥–∞ BYN", min_value=0.0, value=0.0, step=0.1, format="%.2f"),
        "–ö–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è": st.number_input("–ö–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è BYN", min_value=0.0, value=0.0, step=0.1, format="%.2f"),
        "–û—Ç–æ–ø–ª–µ–Ω–∏–µ": st.number_input("–û—Ç–æ–ø–ª–µ–Ω–∏–µ BYN", min_value=0.0, value=0.0, step=0.1, format="%.2f"),
        "–§–∏–∫—Å. –ø–ª–∞—Ç–µ–∂–∏": st.number_input("–§–∏–∫—Å. –ø–ª–∞—Ç–µ–∂–∏ BYN", min_value=0.0, value=0.0, step=0.1, format="%.2f")
    }
user_real["–ò—Ç–æ–≥–æ"] = round(sum(user_real[k] for k in CATEGORIES), 2)

# ------------------------
# –†–∞—Å—á—ë—Ç
# ------------------------
ideal_vol = calculate_volumes(area_m2, occupants, 1.0, month=month)
ideal_costs = calculate_costs_from_volumes(ideal_vol, FULL_TARIFFS, area_m2, occupants)

neighbor_vol = calculate_volumes(area_m2, occupants, behavior_factor, month=month)
neighbor_costs = apply_neighbor_adjustment(neighbor_vol, tariffs, house_category, area_m2, occupants)

# ------------------------
# –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–æ–≤
# ------------------------
st.header("üè† –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–æ–≤")
col1, col2 = st.columns([2, 1])

with col1:
    st.metric("–ò–¥–µ–∞–ª—å–Ω—ã–π —Ä–∞—Å—á—ë—Ç –ø–æ –Ω–æ—Ä–º–∞—Ç–∏–≤–∞–º, BYN", f"{ideal_costs['–ò—Ç–æ–≥–æ']:.2f}")
    st.metric("–í–∞—à–∏ —Ä–µ–∞–ª—å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã, BYN", f"{user_real['–ò—Ç–æ–≥–æ']:.2f}")
    st.metric("–°—Ä–µ–¥–Ω–∏–π —Å–æ—Å–µ–¥, BYN", f"{neighbor_costs['–ò—Ç–æ–≥–æ']:.2f}")

with col2:
    detail_df = pd.DataFrame({
        "–ö–∞—Ç–µ–≥–æ—Ä–∏—è": CATEGORIES,
        "–ò–¥–µ–∞–ª—å–Ω—ã–π —Ä–∞—Å—á—ë—Ç (BYN)": [ideal_costs[c] for c in CATEGORIES],
        "–í–∞—à–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (BYN)": [user_real[c] for c in CATEGORIES],
        "–°—Ä–µ–¥–Ω–∏–π —Å–æ—Å–µ–¥ (BYN)": [neighbor_costs[c] for c in CATEGORIES],
    })
    st.dataframe(detail_df.style.format("{:.2f}"), height=260)

# ------------------------
# –ì—Ä–∞—Ñ–∏–∫
# ------------------------
plot_df = pd.DataFrame({
    "–ö–∞—Ç–µ–≥–æ—Ä–∏—è": CATEGORIES * 3,
    "–¢–∏–ø": (["–ò–¥–µ–∞–ª—å–Ω—ã–π —Ä–∞—Å—á—ë—Ç"] * len(CATEGORIES)) + (["–í–∞—à–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"] * len(CATEGORIES)) + (["–°—Ä–µ–¥–Ω–∏–π —Å–æ—Å–µ–¥"] * len(CATEGORIES)),
    "BYN": [ideal_costs[c] for c in CATEGORIES] + [user_real[c] for c in CATEGORIES] + [neighbor_costs[c] for c in CATEGORIES]
})

fig = px.bar(plot_df, x="–ö–∞—Ç–µ–≥–æ—Ä–∏—è", y="BYN", color="–¢–∏–ø", barmode="group",
             color_discrete_map={"–ò–¥–µ–∞–ª—å–Ω—ã–π —Ä–∞—Å—á—ë—Ç":"#636EFA","–í–∞—à–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ":"#00CC96","–°—Ä–µ–¥–Ω–∏–π —Å–æ—Å–µ–¥":"#EF553B"},
             text="BYN")
fig.update_traces(texttemplate='%{text:.2f}', textposition='outside')
fig.update_layout(yaxis_title="BYN / –º–µ—Å—è—Ü", legend_title_text="–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å", uniformtext_minsize=8)
st.plotly_chart(fig, use_container_width=True)

# ------------------------
# –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞–º–∏
# ------------------------
st.header("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ (–º–∏–Ω–∏-–¥–∞—à–±–æ—Ä–¥)")

# –ò–∫–æ–Ω–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
emoji_map = {
    "–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è": "üí°",
    "–í–æ–¥–∞": "üö∞",
    "–û—Ç–æ–ø–ª–µ–Ω–∏–µ": "üî•",
    "–ö–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è": "üíß"
}

tips_map = {
    "–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è": "–≠–Ω–µ—Ä–≥–æ—Å–±–µ—Ä–µ–≥–∞—é—â–∏–µ –ø—Ä–∏–±–æ—Ä—ã",
    "–í–æ–¥–∞": "–ê—ç—Ä–∞—Ç–æ—Ä—ã –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä—É–±",
    "–û—Ç–æ–ø–ª–µ–Ω–∏–µ": "–ö–æ–Ω—Ç—Ä–æ–ª—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã",
    "–ö–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è": "–°–ª–µ–¥–∏—Ç–µ –∑–∞ —Å–∞–Ω—Ç–µ—Ö–Ω–∏–∫–æ–π"
}

def get_bar_color(percent):
    if percent < 0:
        return "#81C784"  # –∑–µ–ª–µ–Ω—ã–π ‚Äî —Ä–∞—Å—Ö–æ–¥ –Ω–∏–∂–µ –Ω–æ—Ä–º—ã
    elif percent < 20:
        return "#FFF176"  # –∂–µ–ª—Ç—ã–π ‚Äî –Ω–µ–±–æ–ª—å—à–æ–π –ø–µ—Ä–µ—Ä–∞—Å—Ö–æ–¥
    else:
        return "#E57373"  # –∫—Ä–∞—Å–Ω—ã–π ‚Äî –±–æ–ª—å—à–æ–π –ø–µ—Ä–µ—Ä–∞—Å—Ö–æ–¥

# –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è —Å–µ—Ç–∫–∞ –∫–∞—Ä—Ç–æ—á–µ–∫
cols = st.columns(len(emoji_map))
for i, cat in enumerate(["–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è","–í–æ–¥–∞","–û—Ç–æ–ø–ª–µ–Ω–∏–µ","–ö–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è"]):
    diff = user_real[cat] - ideal_costs[cat]
    percent_diff = round(diff / ideal_costs[cat] * 100, 1) if ideal_costs[cat] > 0 else 0.0
    bar_color = get_bar_color(percent_diff)
    
    with cols[i]:
        st.markdown(f"""
            <div style='padding:10px; border-radius:12px; background-color:#F5F5F5; 
                        text-align:center; min-width:120px;'>
                <div style='font-size:2em'>{emoji_map[cat]}</div>
                <strong>{cat}</strong>
                <div style='margin:6px 0; font-size:0.85em;'>{tips_map[cat]}</div>
                <div style='height:12px; border-radius:6px; background-color:#E0E0E0;'>
                    <div style='width:{min(max(percent_diff,0),100)}%; 
                                background-color:{bar_color}; 
                                height:12px; border-radius:6px;'></div>
                </div>
                <div style='margin-top:4px; font-size:0.8em;'>{percent_diff:+.1f}% –æ—Ç –Ω–æ—Ä–º—ã</div>
            </div>
        """, unsafe_allow_html=True)
