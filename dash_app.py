# app.py
import streamlit as st
import pandas as pd
import plotly.express as px

st.set_page_config(page_title="Utility Benchmark ‚Äî –ú–∏–Ω—Å–∫ —Å –Ω–æ—Ä–º–∞—Ç–∏–≤–∞–º–∏", page_icon="üè†", layout="wide")

# ------------------------
# –ù–æ–≤—ã–µ –Ω–æ—Ä–º–∞—Ç–∏–≤—ã –ú–∏–Ω—Å–∫–∞
# ------------------------
SCENARIOS = {"–≠–∫–æ–Ω–æ–º–Ω—ã–π": 0.85, "–°—Ä–µ–¥–Ω–∏–π": 1.0, "–†–∞—Å—Ç–æ—á–∏—Ç–µ–ª—å–Ω—ã–π": 1.25}

DEFAULT_TARIFFS = {
    "electricity_BYN_per_kWh": 0.2412,  # –∞–∫—Ç—É–∞–ª—å–Ω–æ
    "water_BYN_per_m3": 1.7858,
    "sewage_BYN_per_m3": 0.9586,
    "heating_BYN_per_Gcal": 135.0,
    "fixed_fees_BYN": 5.0
}

DEFAULT_COEFFS = {
    "elec_base_kWh": 0.0,
    "elec_per_person_kWh": 75.0,          # —Å—Ä–µ–¥–Ω–µ–µ –ø–æ –Ω–æ—Ä–º–∞—Ç–∏–≤–∞–º
    "elec_per_m2_kWh": 0.0,
    "water_per_person_m3": 4.2,           # –Ω–æ—Ä–º–∞—Ç–∏–≤
    "hot_water_fraction": 0.45,
    "heating_Gcal_per_m2_season_mid": 0.10,
    "heating_season_months": 7.0
}

HOUSE_COEFS = {
    "–ù–æ–≤—ã–π": {"heating": 1.0, "electricity": 1.0},
    "–°—Ä–µ–¥–Ω–∏–π": {"heating": 1.05, "electricity": 1.05},
    "–°—Ç–∞—Ä—ã–π": {"heating": 1.10, "electricity": 1.05},
}
REALISM_UPLIFT = 1.07

# ------------------------
# –§—É–Ω–∫—Ü–∏–∏ —Ä–∞—Å—á—ë—Ç–∞ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
# ------------------------
def calculate_volumes(area, occupants, factor, coeffs=DEFAULT_COEFFS, month=1):
    elec = (coeffs["elec_base_kWh"] + coeffs["elec_per_person_kWh"] * occupants
            + coeffs["elec_per_m2_kWh"] * area) * factor
    water = coeffs["water_per_person_m3"] * occupants * factor
    hot_water = water * coeffs["hot_water_fraction"]
    sewage = water
    if 4 <= month <= 10:
        heat = 0.0
    else:
        G_mid = coeffs["heating_Gcal_per_m2_season_mid"] * area
        heat = G_mid / coeffs["heating_season_months"]
    return {
        "–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è (–∫–í—Ç¬∑—á)": round(elec, 1),
        "–í–æ–¥–∞ (–º¬≥)": round(water, 2),
        "–ì–æ—Ä—è—á–∞—è –≤–æ–¥–∞ (–º¬≥)": round(hot_water, 2),
        "–ö–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è (–º¬≥)": round(sewage, 2),
        "–û—Ç–æ–ø–ª–µ–Ω–∏–µ (Gcal)": round(heat, 3),
    }

def calculate_costs(volumes, tariffs, subsidy=False, subsidy_rate=1.0):
    t = tariffs.copy()
    if subsidy:
        t["heating_BYN_per_Gcal"] *= subsidy_rate
    e = volumes["–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è (–∫–í—Ç¬∑—á)"] * t["electricity_BYN_per_kWh"]
    w = volumes["–í–æ–¥–∞ (–º¬≥)"] * t["water_BYN_per_m3"]
    s = volumes["–ö–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è (–º¬≥)"] * t["sewage_BYN_per_m3"]
    h = volumes["–û—Ç–æ–ø–ª–µ–Ω–∏–µ (Gcal)"] * t["heating_BYN_per_Gcal"]
    f = t.get("fixed_fees_BYN", 0.0)
    costs = {"–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è": round(e,2), "–í–æ–¥–∞": round(w,2),
             "–ö–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è": round(s,2), "–û—Ç–æ–ø–ª–µ–Ω–∏–µ": round(h,2),
             "–§–∏–∫—Å. –ø–ª–∞—Ç–µ–∂–∏": round(f,2)}
    costs["–ò—Ç–æ–≥–æ"] = round(sum(costs.values()),2)
    return costs

def apply_neighbor_adjustment(volumes, tariffs, house_cat):
    coefs = HOUSE_COEFS[house_cat]
    vol2 = volumes.copy()
    vol2["–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è (–∫–í—Ç¬∑—á)"] *= coefs["electricity"]
    vol2["–û—Ç–æ–ø–ª–µ–Ω–∏–µ (Gcal)"] *= coefs["heating"]
    nb = calculate_costs(vol2, tariffs, subsidy=False)
    return {k: round(v * REALISM_UPLIFT,2) for k,v in nb.items()}

# ------------------------
# Sidebar: –≤–≤–æ–¥
# ------------------------
st.sidebar.header("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–µ–º—å–∏")
month = st.sidebar.selectbox("–ú–µ—Å—è—Ü", list(range(1,13)),
                             format_func=lambda m: ["–Ø–Ω–≤","–§–µ–≤","–ú–∞—Ä","–ê–ø—Ä","–ú–∞–π","–ò—é–Ω","–ò—é–ª","–ê–≤–≥","–°–µ–Ω","–û–∫—Ç","–ù–æ—è","–î–µ–∫"][m-1])
area = st.sidebar.number_input("–ü–ª–æ—â–∞–¥—å, –º¬≤", 10.0, 500.0, 90.0)
adults = st.sidebar.number_input("–í–∑—Ä–æ—Å–ª—ã–µ", 0,10,2)
children = st.sidebar.number_input("–î–µ—Ç–∏", 0,10,1)
occupants = adults + children
scenario = st.sidebar.selectbox("–°—Ü–µ–Ω–∞—Ä–∏–π –ø–æ–≤–µ–¥–µ–Ω–∏—è", list(SCENARIOS.keys()), index=1)
factor = SCENARIOS[scenario]
house_cat = st.sidebar.selectbox("–í–æ–∑—Ä–∞—Å—Ç –¥–æ–º–∞", list(HOUSE_COEFS.keys()), index=1)
use_subsidy = st.sidebar.checkbox("–õ—å–≥–æ—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ")
subsidy_rate = st.sidebar.slider("–î–æ–ª—è —Ç–∞—Ä–∏—Ñ–∞",0.0,1.0,0.2,0.05) if use_subsidy else 1.0

with st.sidebar.expander("–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã"):
    t_e = st.number_input("–≠–ª–µ–∫—Ç—Ä–æ BYN/kWh", value=DEFAULT_TARIFFS["electricity_BYN_per_kWh"], format="%.4f")
    t_w = st.number_input("–í–æ–¥–∞ BYN/m¬≥", value=DEFAULT_TARIFFS["water_BYN_per_m3"], format="%.4f")
    t_s = st.number_input("–ö–∞–Ω–∞–ª-–ø–ª–∞—Ç–∞ BYN/m¬≥", value=DEFAULT_TARIFFS["sewage_BYN_per_m3"], format="%.4f")
    t_h = st.number_input("–û—Ç–æ–ø–ª–µ–Ω–∏–µ BYN/Gcal", value=DEFAULT_TARIFFS["heating_BYN_per_Gcal"], format="%.2f")
    t_f = st.number_input("–§–∏–∫—Å. BYN", value=DEFAULT_TARIFFS["fixed_fees_BYN"], format="%.2f")
tariffs = {#"electricity_BYN_per_kWh": t_e, ...
    "electricity_BYN_per_kWh": t_e,
    "water_BYN_per_m3": t_w,
    "sewage_BYN_per_m3": t_s,
    "heating_BYN_per_Gcal": t_h,
    "fixed_fees_BYN": t_f
}

# ------------------------
# –†–µ–∞–ª—å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã
# ------------------------
st.header("–í–∞—à–∏ —Ä–µ–∞–ª—å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã")
real = {k: st.number_input(f"{k} BYN", min_value=0.0, value=0.0) for k in ["–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è","–í–æ–¥–∞","–ö–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è","–û—Ç–æ–ø–ª–µ–Ω–∏–µ","–§–∏–∫—Å. –ø–ª–∞—Ç–µ–∂–∏"]}
real["–ò—Ç–æ–≥–æ"] = sum(real.values())

# ------------------------
# –†–∞—Å—á—ë—Ç –Ω–æ—Ä–º–∞—Ç–∏–≤–∞ –∏ —Å–æ—Å–µ–¥–∞
# ------------------------
ideal_vol = calculate_volumes(area, occupants, factor, month=month)
ideal_costs = calculate_costs(ideal_vol, tariffs, subsidy=use_subsidy, subsidy_rate=subsidy_rate)
nbr_vol = calculate_volumes(area, occupants, 1.0, month=month)
nbr_costs = apply_neighbor_adjustment(nbr_vol, tariffs, house_cat)

# ------------------------
# –ì—Ä–∞—Ñ–∏–∫ –∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
# ------------------------
st.header("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ: –Ω–æ—Ä–º–∞—Ç–∏–≤ ‚Äî –≤—ã ‚Äî —Å—Ä–µ–¥–Ω–∏–π —Å–æ—Å–µ–¥")
df = pd.DataFrame({
    "–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å":["–ò–¥–µ–∞–ª","–í—ã","–°–æ—Å–µ–¥"],
    "–ò—Ç–æ–≥–æ":[ideal_costs["–ò—Ç–æ–≥–æ"], real["–ò—Ç–æ–≥–æ"], nbr_costs["–ò—Ç–æ–≥–æ"]]
})
fig = px.bar(df, x="–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å", y="–ò—Ç–æ–≥–æ", color="–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å", text="–ò—Ç–æ–≥–æ")
st.plotly_chart(fig, use_container_width=True)

st.subheader("–ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è")
st.write(f"–û—Ç –Ω–æ—Ä–º—ã: {((real['–ò—Ç–æ–≥–æ']/ideal_costs['–ò—Ç–æ–≥–æ']-1)*100):.1f}%")
st.write(f"–û—Ç —Å–æ—Å–µ–¥–∞: {((real['–ò—Ç–æ–≥–æ']/nbr_costs['–ò—Ç–æ–≥–æ']-1)*100):.1f}%")
