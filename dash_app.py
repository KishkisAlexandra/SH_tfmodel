# app.py
import streamlit as st
import pandas as pd
import plotly.express as px

st.set_page_config(page_title="Utility Benchmark ‚Äî –¥–∞—à–±–æ—Ä–¥", page_icon="üè†", layout="wide")

# ------------------------
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ / –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
# ------------------------
ARCHETYPES = {
    "–û–¥–∏–Ω–æ–∫–∏–π –∂–∏—Ç–µ–ª—å": 0.8,
    "–ü–∞—Ä–∞": 0.95,
    "–°–µ–º—å—è —Å –¥–µ—Ç—å–º–∏": 1.1,
    "–ë–æ–ª—å—à–∞—è —Å–µ–º—å—è": 1.25
}

SCENARIOS = {"–≠–∫–æ–Ω–æ–º–Ω—ã–π": 0.85, "–°—Ä–µ–¥–Ω–∏–π": 1.0, "–†–∞—Å—Ç–æ—á–∏—Ç–µ–ª—å–Ω—ã–π": 1.25}

DEFAULT_TARIFFS = {
    "electricity_BYN_per_kWh": 0.254,
    "water_BYN_per_m3": 1.7858,
    "sewage_BYN_per_m3": 0.9586,
    "heating_BYN_per_Gcal": 135.0,
    "fixed_fees_BYN": 5.0
}

DEFAULT_COEFFS = {
    "elec_base_kWh": 40.0,
    "elec_per_person_kWh": 35.0,
    "elec_per_m2_kWh": 0.25,
    "water_per_person_m3": 3.5,
    "hot_water_fraction": 0.45,
    "heating_Gcal_per_m2_season_mid": 0.10,
    "heating_season_months": 7.0
}

# ------------------------
# –§—É–Ω–∫—Ü–∏–∏ —Ä–∞—Å—á—ë—Ç–∞
# ------------------------
def calculate_volumes(area_m2, occupants, behavior_factor, coeffs=DEFAULT_COEFFS, month=1):
    elec = (coeffs["elec_base_kWh"] + coeffs["elec_per_person_kWh"]*occupants +
            coeffs["elec_per_m2_kWh"]*area_m2) * behavior_factor
    water = coeffs["water_per_person_m3"]*occupants*behavior_factor
    hot_water = water * coeffs["hot_water_fraction"]
    sewage = water
    if 4 <= month <= 10:  # –ê–ø—Ä–µ–ª—å‚Äì–û–∫—Ç—è–±—Ä—å: –æ—Ç–æ–ø–ª–µ–Ω–∏–µ –Ω–µ —É—á–∏—Ç—ã–≤–∞–µ–º
        heat_monthly = 0.0
    else:
        G_mid = coeffs["heating_Gcal_per_m2_season_mid"] * area_m2
        heat_monthly = G_mid / coeffs["heating_season_months"]
    return {
        "–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è": round(elec,1),
        "–í–æ–¥–∞": round(water,2),
        "–ì–æ—Ä—è—á–∞—è –≤–æ–¥–∞": round(hot_water,2),
        "–ö–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è": round(sewage,2),
        "–û—Ç–æ–ø–ª–µ–Ω–∏–µ": round(heat_monthly,3)
    }

def calculate_costs(volumes, tariffs, subsidy=False, subsidy_rate=0.2):
    t = tariffs.copy()
    if subsidy:
        t["heating_BYN_per_Gcal"] *= subsidy_rate
    elec_cost = volumes["–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è"] * t["electricity_BYN_per_kWh"]
    water_cost = volumes["–í–æ–¥–∞"] * t["water_BYN_per_m3"]
    sewage_cost = volumes["–ö–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è"] * t["sewage_BYN_per_m3"]
    heat_cost = volumes["–û—Ç–æ–ø–ª–µ–Ω–∏–µ"] * t["heating_BYN_per_Gcal"]
    fixed = t.get("fixed_fees_BYN",0.0)
    costs = {
        "–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è": round(elec_cost,2),
        "–í–æ–¥–∞": round(water_cost,2),
        "–ö–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è": round(sewage_cost,2),
        "–û—Ç–æ–ø–ª–µ–Ω–∏–µ": round(heat_cost,2),
        "–§–∏–∫—Å. –ø–ª–∞—Ç–µ–∂–∏": round(fixed,2)
    }
    costs["–ò—Ç–æ–≥–æ"] = round(sum(costs.values()),2)
    return costs

# ------------------------
# Sidebar: –≤–≤–æ–¥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
# ------------------------
st.sidebar.header("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞—Å—á—ë—Ç–∞")
month = st.sidebar.selectbox("–ú–µ—Å—è—Ü", list(range(1,13)),
                             format_func=lambda x: ["–Ø–Ω–≤","–§–µ–≤","–ú–∞—Ä","–ê–ø—Ä","–ú–∞–π","–ò—é–Ω","–ò—é–ª","–ê–≤–≥","–°–µ–Ω","–û–∫—Ç","–ù–æ—è","–î–µ–∫"][x-1])
area_m2 = st.sidebar.number_input("–ü–ª–æ—â–∞–¥—å, –º¬≤", 10.0, 500.0, 90.0)
adults = st.sidebar.number_input("–í–∑—Ä–æ—Å–ª—ã–µ", 0,10,2)
children = st.sidebar.number_input("–î–µ—Ç–∏", 0,10,1)
occupants = adults + children
behavior = st.sidebar.selectbox("–°—Ü–µ–Ω–∞—Ä–∏–π –ø–æ–≤–µ–¥–µ–Ω–∏—è", list(SCENARIOS.keys()), index=1)
behavior_factor = SCENARIOS[behavior]
archetype_name = st.sidebar.selectbox("–°—Ä–∞–≤–Ω–∏—Ç—å —Å –ø—Ä–æ—Ñ–∏–ª–µ–º (–∞—Ä—Ö–µ—Ç–∏–ø)", list(ARCHETYPES.keys()), index=3)
archetype_factor = ARCHETYPES[archetype_name]

# –ì–∞–ª–æ—á–∫–∞ –ª—å–≥–æ—Ç–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞
st.sidebar.markdown("---")
use_subsidy = st.sidebar.checkbox("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª—å–≥–æ—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ")
if use_subsidy:
    subsidy_rate = st.sidebar.slider("–î–æ–ª—è –æ—Ç –ø–æ–ª–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞", 0.0, 1.0, 0.2, 0.05)
else:
    subsidy_rate = 1.0

# –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∞—Ä–∏—Ñ–∞ (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ –ª—å–≥–æ—Ç)
with st.sidebar.expander("–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∞—Ä–∏—Ñ–∞"):
    t_elec = st.number_input("–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è BYN/kWh", value=DEFAULT_TARIFFS["electricity_BYN_per_kWh"], format="%.6f")
    t_water = st.number_input("–í–æ–¥–∞ BYN/m¬≥", value=DEFAULT_TARIFFS["water_BYN_per_m3"], format="%.6f")
    t_sewage = st.number_input("–ö–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è BYN/m¬≥", value=DEFAULT_TARIFFS["sewage_BYN_per_m3"], format="%.6f")
    t_heating = st.number_input("–û—Ç–æ–ø–ª–µ–Ω–∏–µ BYN/Gcal", value=DEFAULT_TARIFFS["heating_BYN_per_Gcal"], format="%.2f")
    t_fixed = st.number_input("–§–∏–∫—Å. –ø–ª–∞—Ç–µ–∂–∏ BYN/–º–µ—Å", value=DEFAULT_TARIFFS["fixed_fees_BYN"], format="%.2f")

tariffs = {
    "electricity_BYN_per_kWh": t_elec,
    "water_BYN_per_m3": t_water,
    "sewage_BYN_per_m3": t_sewage,
    "heating_BYN_per_Gcal": t_heating,
    "fixed_fees_BYN": t_fixed
}

# ------------------------
# –†–∞—Å—á—ë—Ç
# ------------------------
user_vol = calculate_volumes(area_m2, occupants, behavior_factor, month=month)
user_costs = calculate_costs(user_vol, tariffs, subsidy=use_subsidy, subsidy_rate=subsidy_rate)
typical_vol = calculate_volumes(area_m2, occupants, archetype_factor, month=month)
typical_costs = calculate_costs(typical_vol, tariffs, subsidy=False)

# ------------------------
# –ö–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏
# ------------------------
st.header("üè† –ö–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏")
st.subheader(f"–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø—Ä–æ—Ñ–∏–ª–µ–º: ¬´{archetype_name}¬ª")

col1, col2 = st.columns(2)
with col1:
    st.metric("–í–∞—à —Å—á—ë—Ç, BYN", f"{user_costs['–ò—Ç–æ–≥–æ']}")
    st.metric("–¢–∏–ø–æ–≤–æ–π —Å—á—ë—Ç, BYN", f"{typical_costs['–ò—Ç–æ–≥–æ']}")
    diff_percent = round((user_costs['–ò—Ç–æ–≥–æ']/typical_costs['–ò—Ç–æ–≥–æ']-1)*100,1)
    st.info(f"–í–∞—à–∏ —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ {diff_percent}% {'–≤—ã—à–µ' if diff_percent>0 else '–Ω–∏–∂–µ'} —Å—Ä–µ–¥–Ω–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è.")

with col2:
    # –°—Ç–æ–ª–±—Ü–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞
    cost_df = pd.DataFrame({
        "–ö–∞—Ç–µ–≥–æ—Ä–∏—è": list(user_costs.keys())[:-1],
        "–í–∞—à–∏ —Ä–∞—Å—Ö–æ–¥—ã": list(user_costs.values())[:-1],
        "–¢–∏–ø–æ–≤—ã–µ —Ä–∞—Å—Ö–æ–¥—ã": list(typical_costs.values())[:-1]
    })
    fig = px.bar(cost_df, x="–ö–∞—Ç–µ–≥–æ—Ä–∏—è", y=["–í–∞—à–∏ —Ä–∞—Å—Ö–æ–¥—ã","–¢–∏–ø–æ–≤—ã–µ —Ä–∞—Å—Ö–æ–¥—ã"],
                 barmode="group", color_discrete_sequence=["#636EFA","#EF553B"])
    fig.update_layout(yaxis_title="BYN / –º–µ—Å—è—Ü")
    st.plotly_chart(fig, use_container_width=True)
