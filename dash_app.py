# app.py
import streamlit as st
import pandas as pd
import plotly.express as px

st.set_page_config(page_title="Utility Benchmark ‚Äî –¥–∞—à–±–æ—Ä–¥", page_icon="üè†", layout="wide")

# ------------------------
# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ —Ç–∞—Ä–∏—Ñ—ã
# ------------------------
SCENARIOS = {"–≠–∫–æ–Ω–æ–º–Ω—ã–π": 0.85, "–°—Ä–µ–¥–Ω–∏–π": 1.0, "–†–∞—Å—Ç–æ—á–∏—Ç–µ–ª—å–Ω—ã–π": 1.25}

# –ú–∏–Ω—Å–∫
DEFAULT_COEFFS = {
    "elec_base_kWh": 60.0,
    "elec_per_person_kWh": 75.0,
    "elec_per_m2_kWh": 0.5,
    "water_per_person_m3": 4.5,
    "hot_water_fraction": 0.6,
    "heating_Gcal_per_m2_season_mid": 0.15,
    "heating_season_months": 7.0
}

HOUSE_COEFS = {
    "–ù–æ–≤—ã–π": {"heating": 1.0, "electricity": 1.0},
    "–°—Ä–µ–¥–Ω–∏–π": {"heating": 1.05, "electricity": 1.05},
    "–°—Ç–∞—Ä—ã–π": {"heating": 1.1, "electricity": 1.05},
}
REALISM_UPLIFT = 1.07

CATEGORIES_MINSK = ["–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è", "–í–æ–¥–∞", "–ö–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è", "–û—Ç–æ–ø–ª–µ–Ω–∏–µ", "–§–∏–∫—Å. –ø–ª–∞—Ç–µ–∂–∏"]
CATEGORIES_LIMASSOL = ["–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è", "–í–æ–¥–∞", "–û—Ç–æ–ø–ª–µ–Ω–∏–µ", "–ò–Ω—Ç–µ—Ä–Ω–µ—Ç", "–¢–µ–ª–µ—Ñ–æ–Ω", "IPTV", "–°–µ—Ä–≤–∏—Å–Ω—ã–π —Å–±–æ—Ä"]

HEATING_MONTHS = [1,2,3,4,10,11,12]  # –º–µ—Å—è—Ü—ã, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —Å—á–∏—Ç–∞–µ—Ç—Å—è –æ—Ç–æ–ø–ª–µ–Ω–∏–µ

# –ú–∏–Ω—Å–∫ —Ç–∞—Ä–∏—Ñ—ã
ELECTRICITY_FULL = 0.2969
ELECTRICITY_SUBSIDY = 0.2412
HEATING_FULL = 134.94
HEATING_SUBSIDY = 24.7187
WATER_TARIFF = 1.7858
SEWAGE_TARIFF = 0.9586
FIXED_FEES = 5.0

# –õ–∏–º–∞—Å—Å–æ–ª —Ç–∞—Ä–∏—Ñ—ã
ELECTRICITY_EUR_PER_KWH = 0.242
WATER_BASE_EUR = 22.0
WATER_VOLUME_TARIFF_EUR = 0.9  # –¥–æ 40 –º3
WATER_NDS = 1.05
ELECTRICITY_NDS = 1.19
OTHER_NDS = 1.19
INTERNET_EUR = 20 * OTHER_NDS
PHONE_EUR = 20 * OTHER_NDS
IPTV_EUR = 10 * OTHER_NDS
SERVICE_MIN_EUR = 45 * OTHER_NDS
SERVICE_MAX_EUR = 125 * OTHER_NDS

# ------------------------
# –§—É–Ω–∫—Ü–∏–∏ —Ä–∞—Å—á—ë—Ç–∞
# ------------------------
def calculate_volumes(area_m2, occupants, behavior_factor, coeffs=DEFAULT_COEFFS, month=1):
    elec = (coeffs["elec_base_kWh"] + coeffs["elec_per_person_kWh"]*occupants +
            coeffs["elec_per_m2_kWh"]*area_m2) * behavior_factor
    water = coeffs["water_per_person_m3"]*occupants*behavior_factor
    hot_water = water * coeffs["hot_water_fraction"]
    sewage = water
    if month in HEATING_MONTHS:
        G_mid = coeffs["heating_Gcal_per_m2_season_mid"] * area_m2
        heat_monthly = G_mid / coeffs["heating_season_months"]
    else:
        heat_monthly = 0.0
    return {
        "–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è": round(elec,1),
        "–í–æ–¥–∞": round(water,2),
        "–ì–æ—Ä—è—á–∞—è –≤–æ–¥–∞": round(hot_water,2),
        "–ö–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è": round(sewage,2),
        "–û—Ç–æ–ø–ª–µ–Ω–∏–µ": round(heat_monthly,3)
    }

def calculate_costs_from_volumes(volumes, tariffs, area_m2=50, occupants=1, floor=1, has_elevator=True):
    elec_cost = volumes["–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è"] * tariffs["electricity_BYN_per_kWh"]
    water_cost = volumes["–í–æ–¥–∞"] * tariffs["water_BYN_per_m3"]
    sewage_cost = volumes["–ö–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è"] * tariffs["sewage_BYN_per_m3"]
    heat_cost = volumes["–û—Ç–æ–ø–ª–µ–Ω–∏–µ"] * tariffs["heating_BYN_per_Gcal"]

    # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏
    maintenance_max = 0.0388
    lighting_max = 0.0249
    waste_norm = 0.2092
    elevator_max = 0.88
    capital_repair_rate = 0.05

    maintenance_cost = area_m2 * maintenance_max
    lighting_cost = area_m2 * lighting_max
    waste_cost = waste_norm * occupants
    capital_repair_cost = area_m2 * capital_repair_rate
    elevator_cost = elevator_max * occupants if has_elevator and floor >= 2 else 0.0

    fixed = maintenance_cost + lighting_cost + waste_cost + capital_repair_cost + elevator_cost

    costs = {
        "–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è": round(elec_cost,2),
        "–í–æ–¥–∞": round(water_cost,2),
        "–ö–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è": round(sewage_cost,2),
        "–û—Ç–æ–ø–ª–µ–Ω–∏–µ": round(heat_cost,2),
        "–§–∏–∫—Å. –ø–ª–∞—Ç–µ–∂–∏": round(fixed,2)
    }
    costs["–ò—Ç–æ–≥–æ"] = round(sum(costs.values()),2)
    return costs

def apply_neighbor_adjustment(volumes, tariffs, house_category, area_m2, occupants, floor=1, has_elevator=True):
    coefs = HOUSE_COEFS.get(house_category, {"heating":1.0,"electricity":1.0})
    vol_adj = volumes.copy()
    vol_adj["–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è"] = vol_adj["–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è"] * coefs["electricity"]
    vol_adj["–û—Ç–æ–ø–ª–µ–Ω–∏–µ"] = vol_adj["–û—Ç–æ–ø–ª–µ–Ω–∏–µ"] * coefs["heating"]
    neighbor_costs = calculate_costs_from_volumes(vol_adj, tariffs, area_m2, occupants, floor, has_elevator)
    neighbor_costs = {k: round(v * REALISM_UPLIFT, 2) for k, v in neighbor_costs.items()}
    return neighbor_costs

def calculate_limassol_costs(area_m2, occupants, behavior_factor, electricity_kWh, use_max_other=False):
    elec_cost = electricity_kWh * ELECTRICITY_EUR_PER_KWH * ELECTRICITY_NDS * behavior_factor
    water_volume = 25.2 * behavior_factor
    water_cost = (WATER_BASE_EUR + min(water_volume,40)*WATER_VOLUME_TARIFF_EUR) * WATER_NDS
    other_cost = INTERNET_EUR + PHONE_EUR + IPTV_EUR + (SERVICE_MAX_EUR if use_max_other else SERVICE_MIN_EUR)
    total = elec_cost + water_cost + other_cost
    return {
        "–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è": round(elec_cost,2),
        "–í–æ–¥–∞": round(water_cost,2),
        "–û—Ç–æ–ø–ª–µ–Ω–∏–µ": 0.0,
        "–ò–Ω—Ç–µ—Ä–Ω–µ—Ç": round(INTERNET_EUR,2),
        "–¢–µ–ª–µ—Ñ–æ–Ω": round(PHONE_EUR,2),
        "IPTV": round(IPTV_EUR,2),
        "–°–µ—Ä–≤–∏—Å–Ω—ã–π —Å–±–æ—Ä": round(SERVICE_MAX_EUR if use_max_other else SERVICE_MIN_EUR,2),
        "–ò—Ç–æ–≥–æ": round(total,2)
    }

# ------------------------
# Sidebar: –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–µ–º—å–∏
# ------------------------
st.sidebar.header("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–≤–∞—Ä—Ç–∏—Ä—ã")
city = st.sidebar.selectbox("–ì–æ—Ä–æ–¥", ["–ú–∏–Ω—Å–∫","–õ–∏–º–∞—Å—Å–æ–ª"])
month = st.sidebar.selectbox("–ú–µ—Å—è—Ü", list(range(1,13)),
                             format_func=lambda x: ["–Ø–Ω–≤","–§–µ–≤","–ú–∞—Ä","–ê–ø—Ä","–ú–∞–π","–ò—é–Ω","–ò—é–ª","–ê–≤–≥","–°–µ–Ω","–û–∫—Ç","–ù–æ—è","–î–µ–∫"][x-1])
area_m2 = st.sidebar.number_input("–ü–ª–æ—â–∞–¥—å, –º¬≤", 10.0, 500.0, 90.0)
adults = st.sidebar.number_input("–í–∑—Ä–æ—Å–ª—ã–µ", 0,10,2)
children = st.sidebar.number_input("–î–µ—Ç–∏", 0,10,2)
occupants = adults + children

scenario = st.sidebar.selectbox("–°—Ü–µ–Ω–∞—Ä–∏–π –ø–æ–≤–µ–¥–µ–Ω–∏—è", list(SCENARIOS.keys()), index=1)
behavior_factor = SCENARIOS[scenario]
house_category = st.sidebar.selectbox("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ–º–∞ (—Ç–æ–ª—å–∫–æ –ú–∏–Ω—Å–∫)", list(HOUSE_COEFS.keys()), index=1)

st.sidebar.markdown("---")
use_subsidy = st.sidebar.checkbox("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª—å–≥–æ—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ (—Ç–æ–ª—å–∫–æ –ú–∏–Ω—Å–∫)")
subsidy_rate = st.sidebar.slider("–î–æ–ª—è –æ—Ç –ø–æ–ª–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞", 0.0, 1.0, 0.2, 0.05) if use_subsidy else 1.0
use_max_other = st.sidebar.checkbox("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å–Ω—ã–π —Å–±–æ—Ä (–õ–∏–º–∞—Å—Å–æ–ª)")

electricity_kWh = st.sidebar.number_input("–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏, –∫–í—Ç¬∑—á (–õ–∏–º–∞—Å—Å–æ–ª)", 0.0, 10000.0, 500.0) if city=="–õ–∏–º–∞—Å—Å–æ–ª" else 0.0

# ------------------------
# –í–≤–æ–¥ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤
# ------------------------
if city=="–ú–∏–Ω—Å–∫":
    user_real = {
        "–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è": st.number_input("–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è BYN",0.0,1000.0,0.0),
        "–í–æ–¥–∞": st.number_input("–í–æ–¥–∞ BYN",0.0,1000.0,0.0),
        "–ö–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è": st.number_input("–ö–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è BYN",0.0,1000.0,0.0),
        "–û—Ç–æ–ø–ª–µ–Ω–∏–µ": st.number_input("–û—Ç–æ–ø–ª–µ–Ω–∏–µ BYN",0.0,10000.0,0.0),
        "–§–∏–∫—Å. –ø–ª–∞—Ç–µ–∂–∏": st.number_input("–§–∏–∫—Å. –ø–ª–∞—Ç–µ–∂–∏ BYN",0.0,1000.0,0.0)
    }
    user_real["–ò—Ç–æ–≥–æ"] = round(sum(user_real[k] for k in CATEGORIES_MINSK),2)
else:
    user_real = None  # –±—É–¥–µ–º –±—Ä–∞—Ç—å –ø–æ—Å–ª–µ —Ä–∞—Å—á—ë—Ç–∞ —Å–æ—Å–µ–¥–µ–π

# ------------------------
# –†–∞—Å—á—ë—Ç –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ –∏ —Å—Ä–µ–¥–Ω–µ–≥–æ —Å–æ—Å–µ–¥–∞
# ------------------------
if city=="–ú–∏–Ω—Å–∫":
    ideal_vol = calculate_volumes(area_m2, occupants, 1.0, month=month)
    ideal_costs = calculate_costs_from_volumes(
        ideal_vol,
        {
            "electricity_BYN_per_kWh": ELECTRICITY_SUBSIDY,
            "water_BYN_per_m3": WATER_TARIFF,
            "sewage_BYN_per_m3": SEWAGE_TARIFF,
            "heating_BYN_per_Gcal": HEATING_SUBSIDY,
            "fixed_fees_BYN": FIXED_FEES
        },
        area_m2, occupants
    )
    neighbor_vol = calculate_volumes(area_m2, occupants, behavior_factor, month=month)
    neighbor_tariffs = {
        "electricity_BYN_per_kWh": ELECTRICITY_SUBSIDY * subsidy_rate,
        "water_BYN_per_m3": WATER_TARIFF,
        "sewage_BYN_per_m3": SEWAGE_TARIFF,
        "heating_BYN_per_Gcal": HEATING_SUBSIDY * subsidy_rate,
        "fixed_fees_BYN": FIXED_FEES
    }
    neighbor_costs = apply_neighbor_adjustment(neighbor_vol, neighbor_tariffs, house_category, area_m2, occupants)
else:  # –õ–∏–º–∞—Å—Å–æ–ª
    ideal_costs = calculate_limassol_costs(area_m2, occupants, 1.0, electricity_kWh, use_max_other)
    neighbor_costs = calculate_limassol_costs(area_m2, occupants, behavior_factor, electricity_kWh, use_max_other)
    if user_real is None:
        user_real = neighbor_costs

# ------------------------
# –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤
# ------------------------
st.header("üè† –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–æ–≤")
CATEGORIES = CATEGORIES_MINSK if city=="–ú–∏–Ω—Å–∫" else CATEGORIES_LIMASSOL

col1, col2 = st.columns([2,1])

with col1:
    st.metric("–ò–¥–µ–∞–ª—å–Ω—ã–π —Ä–∞—Å—á—ë—Ç", f"{ideal_costs['–ò—Ç–æ–≥–æ']:.2f}")
    st.metric("–í–∞—à–∏ —Ä–µ–∞–ª—å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã", f"{user_real['–ò—Ç–æ–≥–æ']:.2f}")
    st.metric("–°—Ä–µ–¥–Ω–∏–π —Å–æ—Å–µ–¥", f"{neighbor_costs['–ò—Ç–æ–≥–æ']:.2f}")

    diff_real = round((user_real["–ò—Ç–æ–≥–æ"]/ideal_costs.get("–ò—Ç–æ–≥–æ",1)-1)*100,1)
    diff_neighbor = round((user_real["–ò—Ç–æ–≥–æ"]/neighbor_costs.get("–ò—Ç–æ–≥–æ",1)-1)*100,1)

    st.info(f"–í–∞—à–∏ —Ä–µ–∞–ª—å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ {diff_real}% {'–≤—ã—à–µ' if diff_real>0 else '–Ω–∏–∂–µ'} –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞—Å—á—ë—Ç–∞.")
    st.info(f"–í–∞—à–∏ —Ä–µ–∞–ª—å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ {diff_neighbor}% {'–≤—ã—à–µ' if diff_neighbor>0 else '–Ω–∏–∂–µ'} —Å—Ä–µ–¥–Ω–µ–≥–æ —Å–æ—Å–µ–¥–∞.")

with col2:
    detail_df = pd.DataFrame({ "–ö–∞—Ç–µ–≥–æ—Ä–∏—è": CATEGORIES })
    for key in CATEGORIES:
        detail_df[f"–ò–¥–µ–∞–ª—å–Ω—ã–π —Ä–∞—Å—á—ë—Ç"] = [ideal_costs.get(k,0) for k in CATEGORIES]
        detail_df[f"–í–∞—à–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"] = [user_real.get(k,0) for k in CATEGORIES]
        detail_df[f"–°—Ä–µ–¥–Ω–∏–π —Å–æ—Å–µ–¥"] = [neighbor_costs.get(k,0) for k in CATEGORIES]

    styled_df = detail_df.style.format("{:.2f}").background_gradient(
        subset=["–ò–¥–µ–∞–ª—å–Ω—ã–π —Ä–∞—Å—á—ë—Ç", "–í–∞—à–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", "–°—Ä–µ–¥–Ω–∏–π —Å–æ—Å–µ–¥"], cmap="BuPu"
    ).set_properties(**{'text-align': 'center','font-size': '14px'}).set_table_styles([
        {'selector': 'th', 'props': [('text-align', 'center'), ('font-size', '15px'), ('background-color', '#f0f0f0')]}
    ])
    st.dataframe(styled_df, height=280)

# ------------------------
# –ì—Ä–∞—Ñ–∏–∫ —Ä–∞—Å—Ö–æ–¥–æ–≤
# ------------------------
plot_df = pd.DataFrame({
    "–ö–∞—Ç–µ–≥–æ—Ä–∏—è": CATEGORIES * 3,
    "–¢–∏–ø": (["–ò–¥–µ–∞–ª—å–Ω—ã–π —Ä–∞—Å—á—ë—Ç"] * len(CATEGORIES)) + (["–í–∞—à–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"] * len(CATEGORIES)) + (["–°—Ä–µ–¥–Ω–∏–π —Å–æ—Å–µ–¥"] * len(CATEGORIES)),
    "BYN": [ideal_costs.get(c,0) for c in CATEGORIES] + [user_real.get(c,0) for c in CATEGORIES] + [neighbor_costs.get(c,0) for c in CATEGORIES]
})
fig = px.bar(plot_df, x="–ö–∞—Ç–µ–≥–æ—Ä–∏—è", y="BYN", color="–¢–∏–ø", barmode="group",
             color_discrete_map={"–ò–¥–µ–∞–ª—å–Ω—ã–π —Ä–∞—Å—á—ë—Ç":"#636EFA","–í–∞—à–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ":"#00CC96","–°—Ä–µ–¥–Ω–∏–π —Å–æ—Å–µ–¥":"#EF553B"},
             text="BYN")
fig.update_traces(texttemplate='%{text:.2f}', textposition='outside')
fig.update_layout(yaxis_title="BYN / –º–µ—Å—è—Ü", legend_title_text="–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å", uniformtext_minsize=8)
st.plotly_chart(fig, use_container_width=True)
