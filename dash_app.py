# app.py
import streamlit as st
import pandas as pd

st.set_page_config(
    page_title="Utility Benchmark Dashboard",
    page_icon="üè†",
    layout="wide"
)

# ---- –¢–∏–ø–æ–≤—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏ ----
profiles = {"eco": 0.85, "average": 1.0, "intensive": 1.15}

DEFAULT_TARIFFS = {
    "electricity_BYN_per_kWh": 0.254,
    "water_BYN_per_m3": 1.7858,
    "sewage_BYN_per_m3": 0.9586,
    "heating_BYN_per_Gcal": 135.0,
    "fixed_fees_BYN": 5.0
}

DEFAULT_COEFFS = {
    "elec_base_kWh": 40.0,
    "elec_per_person_kWh": 35.0,
    "elec_per_m2_kWh": 0.25,
    "water_per_person_m3": 3.5,
    "hot_water_fraction": 0.45,
    "heating_Gcal_per_m2_season_low": 0.08,
    "heating_Gcal_per_m2_season_mid": 0.10,
    "heating_Gcal_per_m2_season_high": 0.12,
    "heating_season_months": 7.0
}

# ---- –§—É–Ω–∫—Ü–∏–∏ —Ä–∞—Å—á—ë—Ç–∞ ----
def calculate_volumes(area_m2, occupants, profile, coeffs=DEFAULT_COEFFS, month=1):
    pf = profiles.get(profile, 1.0)
    elec = (coeffs["elec_base_kWh"] + coeffs["elec_per_person_kWh"]*occupants +
            coeffs["elec_per_m2_kWh"]*area_m2)*pf
    water = coeffs["water_per_person_m3"]*occupants*pf
    hot_water = water*coeffs["hot_water_fraction"]
    sewage = water
    # –û—Ç–æ–ø–ª–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–∞–µ–º —Å –∞–ø—Ä–µ–ª—è (4) –ø–æ –æ–∫—Ç—è–±—Ä—å (10)
    if 4 <= month <= 10:
        heat_monthly_low = 0
        heat_monthly_mid = 0
        heat_monthly_high = 0
    else:
        G_low = coeffs["heating_Gcal_per_m2_season_low"]*area_m2
        G_mid = coeffs["heating_Gcal_per_m2_season_mid"]*area_m2
        G_high = coeffs["heating_Gcal_per_m2_season_high"]*area_m2
        heat_monthly_low = G_low / coeffs["heating_season_months"]
        heat_monthly_mid = G_mid / coeffs["heating_season_months"]
        heat_monthly_high = G_high / coeffs["heating_season_months"]
    return {
        "electricity_kWh": round(elec,1),
        "water_m3": round(water,2),
        "hot_water_m3": round(hot_water,2),
        "sewage_m3": round(sewage,2),
        "heating_Gcal_month_low": round(heat_monthly_low,3),
        "heating_Gcal_month_mid": round(heat_monthly_mid,3),
        "heating_Gcal_month_high": round(heat_monthly_high,3)
    }

def calculate_costs(volumes, tariffs, heating_scenario="mid"):
    elec_cost = volumes["electricity_kWh"]*tariffs["electricity_BYN_per_kWh"]
    water_cost = volumes["water_m3"]*tariffs["water_BYN_per_m3"]
    sewage_cost = volumes["sewage_m3"]*tariffs["sewage_BYN_per_m3"]
    heat_cost = volumes[f"heating_Gcal_month_{heating_scenario}"]*tariffs["heating_BYN_per_Gcal"]
    fixed = tariffs.get("fixed_fees_BYN",0)
    costs = {
        "electricity_cost": round(elec_cost,2),
        "water_cost": round(water_cost,2),
        "sewage_cost": round(sewage_cost,2),
        "heating_cost": round(heat_cost,2),
        "fixed_fees": round(fixed,2)
    }
    costs["total_monthly"] = round(sum(costs.values()),2)
    return costs

# ---- Sidebar ----
with st.sidebar:
    st.header("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–∞—à–µ–≥–æ –∂–∏–ª—å—è")
    month = st.selectbox("–ú–µ—Å—è—Ü", list(range(1,13)), format_func=lambda x:
                         ["–Ø–Ω–≤","–§–µ–≤","–ú–∞—Ä","–ê–ø—Ä","–ú–∞–π","–ò—é–Ω","–ò—é–ª","–ê–≤–≥","–°–µ–Ω","–û–∫—Ç","–ù–æ—è","–î–µ–∫"][x-1])
    area_m2 = st.number_input("–ü–ª–æ—â–∞–¥—å, –º¬≤", min_value=10.0, max_value=500.0, value=80.0)
    adults = st.number_input("–í–∑—Ä–æ—Å–ª—ã–µ", min_value=0, max_value=10, value=2)
    children = st.number_input("–î–µ—Ç–∏", min_value=0, max_value=10, value=1)
    profile = st.selectbox("–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–≤–µ–¥–µ–Ω–∏—è", ["eco","average","intensive"], index=1)
    heating_type = st.selectbox("–¢–∏–ø –æ—Ç–æ–ø–ª–µ–Ω–∏—è", ["central","gas","electric"], index=0)
    housing_type = st.selectbox("–¢–∏–ø –∂–∏–ª—å—è", ["–∫–≤–∞—Ä—Ç–∏—Ä–∞","–¥–æ–º"], index=0)

# ---- –†–∞—Å—á—ë—Ç—ã ----
occupants = adults + children
user_volumes = calculate_volumes(area_m2, occupants, profile, month=month)
user_costs = calculate_costs(user_volumes, DEFAULT_TARIFFS)

typical_volumes = calculate_volumes(area_m2, occupants, "average", month=month)
typical_costs = calculate_costs(typical_volumes, DEFAULT_TARIFFS)

# ---- –î–∞—à–±–æ—Ä–¥ ----
st.title("üè† –ú–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–æ–≤–æ–≥–æ –¥–æ–º–æ—Ö–æ–∑—è–π—Å—Ç–≤–∞")
st.subheader(f"–ú–µ—Å—è—Ü: {month}")

col1, col2 = st.columns(2)
with col1:
    st.metric("–í–∞—à–∏ —Ä–∞—Å—Ö–æ–¥—ã (BYN/–º–µ—Å)", f"{user_costs['total_monthly']}")
    st.metric("–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è", f"{user_costs['electricity_cost']}")
    st.metric("–û—Ç–æ–ø–ª–µ–Ω–∏–µ", f"{user_costs['heating_cost']}")
with col2:
    st.metric("–¢–∏–ø–æ–≤—ã–µ —Ä–∞—Å—Ö–æ–¥—ã (BYN/–º–µ—Å)", f"{typical_costs['total_monthly']}")
    st.metric("–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è", f"{typical_costs['electricity_cost']}")
    st.metric("–û—Ç–æ–ø–ª–µ–Ω–∏–µ", f"{typical_costs['heating_cost']}")

# ---- –ë–∞—Ä-—á–∞—Ä—Ç –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤ ----
st.subheader("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ —É—Å–ª—É–≥–∞–º")
compare_chart_df = pd.DataFrame({
    "–í–∞—à–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏": [user_costs["electricity_cost"], user_costs["water_cost"], user_costs["heating_cost"]],
    "–¢–∏–ø–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏": [typical_costs["electricity_cost"], typical_costs["water_cost"], typical_costs["heating_cost"]]
}, index=["–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è","–í–æ–¥–∞","–û—Ç–æ–ø–ª–µ–Ω–∏–µ"])

st.bar_chart(compare_chart_df)

# ---- –ë–∞—Ä-—á–∞—Ä—Ç –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –æ–±—ä—ë–º–æ–≤ ----
st.subheader("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ–±—ä—ë–º–æ–≤ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è")
compare_volumes_df = pd.DataFrame({
    "–í–∞—à–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏": [user_volumes["electricity_kWh"], user_volumes["water_m3"], user_volumes["hot_water_m3"],
                        user_volumes["sewage_m3"], user_volumes["heating_Gcal_month_mid"]],
    "–¢–∏–ø–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏": [typical_volumes["electricity_kWh"], typical_volumes["water_m3"], typical_volumes["hot_water_m3"],
                           typical_volumes["sewage_m3"], typical_volumes["heating_Gcal_month_mid"]]
}, index=["–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è (kWh)","–í–æ–¥–∞ (m¬≥)","–ì–æ—Ä—è—á–∞—è –≤–æ–¥–∞ (m¬≥)","–ö–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è (m¬≥)","–û—Ç–æ–ø–ª–µ–Ω–∏–µ (Gcal)"])

st.bar_chart(compare_volumes_df)
