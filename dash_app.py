# app.py
import streamlit as st
import pandas as pd
import plotly.express as px

st.set_page_config(page_title="Utility Benchmark ‚Äî –¥–∞—à–±–æ—Ä–¥", page_icon="üè†", layout="wide")

# ------------------------
# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
# ------------------------
SCENARIOS = {"–≠–∫–æ–Ω–æ–º–Ω—ã–π": 0.85, "–°—Ä–µ–¥–Ω–∏–π": 1.0, "–†–∞—Å—Ç–æ—á–∏—Ç–µ–ª—å–Ω—ã–π": 1.25}

# –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã (–ë–µ–ª–∞—Ä—É—Å—å, 2025)
DEFAULT_TARIFFS = {
    "electricity_BYN_per_kWh": 0.254,     # BYN/kWh
    "water_BYN_per_m3": 1.9,              # BYN/m¬≥
    "sewage_BYN_per_m3": 1.0,             # BYN/m¬≥
    "heating_BYN_per_Gcal": 135.0,        # BYN/Gcal
    "fixed_fees_BYN": 5.0                 # BYN/–º–µ—Å
}

# –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –Ω–æ—Ä–º—ã –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è
DEFAULT_COEFFS = {
    "elec_base_kWh": 60.0,
    "elec_per_person_kWh": 75.0,
    "elec_per_m2_kWh": 0.5,
    "water_per_person_m3": 4.5,
    "hot_water_fraction": 0.6,
    "heating_Gcal_per_m2_season_mid": 0.15,
    "heating_season_months": 7.0
}

HOUSE_COEFS = {
    "–ù–æ–≤—ã–π": {"heating": 1.0, "electricity": 1.0},
    "–°—Ä–µ–¥–Ω–∏–π": {"heating": 1.05, "electricity": 1.05},
    "–°—Ç–∞—Ä—ã–π": {"heating": 1.1, "electricity": 1.05},
}
REALISM_UPLIFT = 1.07

CATEGORIES = ["–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è", "–í–æ–¥–∞", "–ö–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è", "–û—Ç–æ–ø–ª–µ–Ω–∏–µ", "–§–∏–∫—Å. –ø–ª–∞—Ç–µ–∂–∏"]

# ------------------------
# –§—É–Ω–∫—Ü–∏–∏ —Ä–∞—Å—á—ë—Ç–∞
# ------------------------
def calculate_volumes(area_m2, occupants, behavior_factor, coeffs=DEFAULT_COEFFS, month=1):
    elec = (coeffs["elec_base_kWh"] + coeffs["elec_per_person_kWh"]*occupants +
            coeffs["elec_per_m2_kWh"]*area_m2) * behavior_factor
    water = coeffs["water_per_person_m3"]*occupants*behavior_factor
    hot_water = water * coeffs["hot_water_fraction"]
    sewage = water
    # –æ—Ç–æ–ø–ª–µ–Ω–∏–µ: –æ—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è –º–µ—Å—è—Ü–µ–≤ –∞–ø—Ä–µ–ª—å-–æ–∫—Ç—è–±—Ä—å
    if 4 <= month <= 10:
        heat_monthly = 0.0
    else:
        G_mid = coeffs["heating_Gcal_per_m2_season_mid"] * area_m2
        heat_monthly = G_mid / coeffs["heating_season_months"]
    return {
        "–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è": round(elec,1),
        "–í–æ–¥–∞": round(water,2),
        "–ì–æ—Ä—è—á–∞—è –≤–æ–¥–∞": round(hot_water,2),
        "–ö–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è": round(sewage,2),
        "–û—Ç–æ–ø–ª–µ–Ω–∏–µ": round(heat_monthly,3)
    }

def calculate_costs_from_volumes(volumes, tariffs, subsidy=False, subsidy_rate=0.2):
    t = tariffs.copy()
    if subsidy:
        t["heating_BYN_per_Gcal"] *= subsidy_rate

    elec_cost = volumes["–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è"] * t["electricity_BYN_per_kWh"]
    water_cost = volumes["–í–æ–¥–∞"] * t["water_BYN_per_m3"]
    sewage_cost = volumes["–ö–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è"] * t["sewage_BYN_per_m3"]
    heat_cost = volumes["–û—Ç–æ–ø–ª–µ–Ω–∏–µ"] * t["heating_BYN_per_Gcal"]
    fixed = t.get("fixed_fees_BYN", 0.0)

    costs = {
        "–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è": round(elec_cost,2),
        "–í–æ–¥–∞": round(water_cost,2),
        "–ö–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è": round(sewage_cost,2),
        "–û—Ç–æ–ø–ª–µ–Ω–∏–µ": round(heat_cost,2),
        "–§–∏–∫—Å. –ø–ª–∞—Ç–µ–∂–∏": round(fixed,2)
    }
    costs["–ò—Ç–æ–≥–æ"] = round(sum(costs.values()),2)
    return costs

def apply_neighbor_adjustment(volumes, tariffs, house_category):
    coefs = HOUSE_COEFS.get(house_category, {"heating":1.0,"electricity":1.0})
    vol_adj = volumes.copy()
    vol_adj["–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è"] *= coefs["electricity"]
    vol_adj["–û—Ç–æ–ø–ª–µ–Ω–∏–µ"] *= coefs["heating"]
    neighbor_costs = calculate_costs_from_volumes(vol_adj, tariffs)
    neighbor_costs = {k: round(v * REALISM_UPLIFT,2) for k,v in neighbor_costs.items()}
    return neighbor_costs

# ------------------------
# Sidebar: –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–µ–º—å–∏
# ------------------------
st.sidebar.header("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–µ–º—å–∏")
month = st.sidebar.selectbox("–ú–µ—Å—è—Ü", list(range(1,13)),
                             format_func=lambda x: ["–Ø–Ω–≤","–§–µ–≤","–ú–∞—Ä","–ê–ø—Ä","–ú–∞–π","–ò—é–Ω","–ò—é–ª","–ê–≤–≥","–°–µ–Ω","–û–∫—Ç","–ù–æ—è","–î–µ–∫"][x-1])
area_m2 = st.sidebar.number_input("–ü–ª–æ—â–∞–¥—å, –º¬≤", 10.0, 500.0, 65.0)
adults = st.sidebar.number_input("–í–∑—Ä–æ—Å–ª—ã–µ", 0,10,2)
children = st.sidebar.number_input("–î–µ—Ç–∏", 0,10,1)
occupants = adults + children
scenario = st.sidebar.selectbox("–°—Ü–µ–Ω–∞—Ä–∏–π –ø–æ–≤–µ–¥–µ–Ω–∏—è", list(SCENARIOS.keys()), index=1)
behavior_factor = SCENARIOS[scenario]
house_category = st.sidebar.selectbox("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ–º–∞", list(HOUSE_COEFS.keys()), index=1)

# –õ—å–≥–æ—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ
st.sidebar.markdown("---")
use_subsidy = st.sidebar.checkbox("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª—å–≥–æ—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ")
if use_subsidy:
    subsidy_rate = st.sidebar.slider("–î–æ–ª—è –æ—Ç –ø–æ–ª–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞", 0.0, 1.0, 0.2, 0.05)
else:
    subsidy_rate = 1.0

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∞—Ä–∏—Ñ–∞
with st.sidebar.expander("–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∞—Ä–∏—Ñ–∞"):
    t_elec = st.number_input("–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è BYN/kWh", value=DEFAULT_TARIFFS["electricity_BYN_per_kWh"], format="%.6f")
    t_water = st.number_input("–í–æ–¥–∞ BYN/m¬≥", value=DEFAULT_TARIFFS["water_BYN_per_m3"], format="%.6f")
    t_sewage = st.number_input("–ö–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è BYN/m¬≥", value=DEFAULT_TARIFFS["sewage_BYN_per_m3"], format="%.6f")
    t_heating = st.number_input("–û—Ç–æ–ø–ª–µ–Ω–∏–µ BYN/Gcal", value=DEFAULT_TARIFFS["heating_BYN_per_Gcal"], format="%.2f")
    t_fixed = st.number_input("–§–∏–∫—Å. –ø–ª–∞—Ç–µ–∂–∏ BYN/–º–µ—Å", value=DEFAULT_TARIFFS["fixed_fees_BYN"], format="%.2f")

tariffs = {
    "electricity_BYN_per_kWh": t_elec,
    "water_BYN_per_m3": t_water,
    "sewage_BYN_per_m3": t_sewage,
    "heating_BYN_per_Gcal": t_heating,
    "fixed_fees_BYN": t_fixed
}

# ------------------------
# –í–≤–æ–¥ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤
# ------------------------
st.header("üìä –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ —Ä–µ–∞–ª—å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ –º–µ—Å—è—Ü (BYN)")
with st.expander("–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—è –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞"):
    user_real = {
        "–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è": st.number_input("–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è BYN", min_value=0.0, value=0.0, step=1.0),
        "–í–æ–¥–∞": st.number_input("–í–æ–¥–∞ BYN", min_value=0.0, value=0.0, step=0.1),
        "–ö–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è": st.number_input("–ö–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è BYN", min_value=0.0, value=0.0, step=0.1),
        "–û—Ç–æ–ø–ª–µ–Ω–∏–µ": st.number_input("–û—Ç–æ–ø–ª–µ–Ω–∏–µ BYN", min_value=0.0, value=0.0, step=0.1),
        "–§–∏–∫—Å. –ø–ª–∞—Ç–µ–∂–∏": st.number_input("–§–∏–∫—Å. –ø–ª–∞—Ç–µ–∂–∏ BYN", min_value=0.0, value=0.0, step=0.1)
    }
user_real["–ò—Ç–æ–≥–æ"] = round(sum(user_real[k] for k in CATEGORIES),2)

# ------------------------
# –†–∞—Å—á—ë—Ç—ã
# ------------------------
ideal_vol = calculate_volumes(area_m2, occupants, behavior_factor, month=month)
ideal_costs = calculate_costs_from_volumes(ideal_vol, tariffs, subsidy=use_subsidy, subsidy_rate=subsidy_rate)

neighbor_vol = calculate_volumes(area_m2, occupants, 1.0, month=month)
neighbor_costs = apply_neighbor_adjustment(neighbor_vol, tariffs, house_category)

# ------------------------
# –í—ã–≤–æ–¥
# ------------------------
st.header("üè† –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–æ–≤")
col1,col2 = st.columns([2,1])
with col1:
    st.metric("–ò–¥–µ–∞–ª—å–Ω—ã–π —Ä–∞—Å—á—ë—Ç –ø–æ –Ω–æ—Ä–º–∞—Ç–∏–≤–∞–º, BYN", f"{ideal_costs['–ò—Ç–æ–≥–æ']:.2f}")
    st.metric("–í–∞—à–∏ —Ä–µ–∞–ª—å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã, BYN", f"{user_real['–ò—Ç–æ–≥–æ']:.2f}")
    st.metric("–°—Ä–µ–¥–Ω–∏–π —Å–æ—Å–µ–¥, BYN", f"{neighbor_costs['–ò—Ç–æ–≥–æ']:.2f}")

    ideal_total = ideal_costs.get("–ò—Ç–æ–≥–æ",0.0)
    neighbor_total = neighbor_costs.get("–ò—Ç–æ–≥–æ",0.0)
    real_total = user_real["–ò—Ç–æ–≥–æ"]
    diff_real = round((real_total/ideal_total-1)*100,1) if ideal_total>0 else 0.0
    diff_neighbor = round((real_total/neighbor_total-1)*100,1) if neighbor_total>0 else 0.0

    st.info(f"–í–∞—à–∏ —Ä–µ–∞–ª—å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ {diff_real}% {'–≤—ã—à–µ' if diff_real>0 else '–Ω–∏–∂–µ'} –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞—Å—á—ë—Ç–∞.")
    st.info(f"–í–∞—à–∏ —Ä–µ–∞–ª—å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ {diff_neighbor}% {'–≤—ã—à–µ' if diff_neighbor>0 else '–Ω–∏–∂–µ'} —Å—Ä–µ–¥–Ω–µ–≥–æ —Å–æ—Å–µ–¥–∞.")

with col2:
    detail_df = pd.DataFrame({
        "–ö–∞—Ç–µ–≥–æ—Ä–∏—è": CATEGORIES,
        "–ò–¥–µ–∞–ª—å–Ω—ã–π —Ä–∞—Å—á—ë—Ç (BYN)":[ideal_costs[c] for c in CATEGORIES],
        "–í–∞—à–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (BYN)":[user_real[c] for c in CATEGORIES],
        "–°—Ä–µ–¥–Ω–∏–π —Å–æ—Å–µ–¥ (BYN)":[neighbor_costs[c] for c in CATEGORIES]
    })
    st.dataframe(detail_df.style.format("{:.2f}"), height=260)

st.markdown("---")
plot_df = pd.DataFrame({
    "–ö–∞—Ç–µ–≥–æ—Ä–∏—è": CATEGORIES*3,
    "–¢–∏–ø": ["–ò–¥–µ–∞–ª—å–Ω—ã–π —Ä–∞—Å—á—ë—Ç"]*len(CATEGORIES)+["–í–∞—à–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"]*len(CATEGORIES)+["–°—Ä–µ–¥–Ω–∏–π —Å–æ—Å–µ–¥"]*len(CATEGORIES),
    "BYN": [ideal_costs[c] for c in CATEGORIES]+[user_real[c] for c in CATEGORIES]+[neighbor_costs[c] for c in CATEGORIES]
})
fig = px.bar(plot_df,x="–ö–∞—Ç–µ–≥–æ—Ä–∏—è",y="BYN",color="–¢–∏–ø",barmode="group",
             color_discrete_map={"–ò–¥–µ–∞–ª—å–Ω—ã–π —Ä–∞—Å—á—ë—Ç":"#636EFA","–í–∞—à–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ":"#00CC96","–°—Ä–µ–¥–Ω–∏–π —Å–æ—Å–µ–¥":"#EF553B"},
             text="BYN")
fig.update_traces(texttemplate="%{text:.2f}",textposition="outside")
fig.update_layout(yaxis_title="BYN / –º–µ—Å—è—Ü",legend_title_text="–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å",uniformtext_minsize=8)
st.plotly_chart(fig,use_container_width=True)

st.header("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
for cat in ["–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è","–í–æ–¥–∞","–û—Ç–æ–ø–ª–µ–Ω–∏–µ","–ö–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è"]:
    if user_real[cat]>ideal_costs[cat]:
        st.write(f"- –ü–µ—Ä–µ—Ä–∞—Å—Ö–æ–¥ –ø–æ {cat}: –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∏–±–æ—Ä—ã –∏ –ø—Ä–∏–≤—ã—á–∫–∏, –≤–æ–∑–º–æ–∂–Ω–∞ —ç–∫–æ–Ω–æ–º–∏—è.")
    else:
        st.write(f"- {cat}: —Ä–∞—Å—Ö–æ–¥ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –∏–ª–∏ –Ω–∏–∂–µ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è.")
