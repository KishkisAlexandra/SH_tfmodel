# app.py
import streamlit as st
import pandas as pd
import plotly.express as px

st.set_page_config(page_title="Utility Benchmark ‚Äî –¥–∞—à–±–æ—Ä–¥", page_icon="üè†", layout="wide")

# ------------------------
# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
# ------------------------
SCENARIOS = {"–≠–∫–æ–Ω–æ–º–Ω—ã–π": 0.85, "–°—Ä–µ–¥–Ω–∏–π": 1.0, "–†–∞—Å—Ç–æ—á–∏—Ç–µ–ª—å–Ω—ã–π": 1.25}

DEFAULT_TARIFFS = {
    "electricity_BYN_per_kWh": 0.254,
    "water_BYN_per_m3": 1.7858,
    "sewage_BYN_per_m3": 0.9586,
    "heating_BYN_per_Gcal": 135.0,
    "fixed_fees_BYN": 5.0
}

DEFAULT_COEFFS = {
    "elec_base_kWh": 60.0,          
    "elec_per_person_kWh": 75.0,    
    "elec_per_m2_kWh": 0.5,         
    "water_per_person_m3": 4.5,     
    "hot_water_fraction": 0.6,      
    "heating_Gcal_per_m2_season_mid": 0.15, 
    "heating_season_months": 7.0
}

HOUSE_COEFS = {
    "–ù–æ–≤—ã–π": {"heating": 1.0, "electricity": 1.0},
    "–°—Ä–µ–¥–Ω–∏–π": {"heating": 1.05, "electricity": 1.05},
    "–°—Ç–∞—Ä—ã–π": {"heating": 1.1, "electricity": 1.05},
}
REALISM_UPLIFT = 1.07
CATEGORIES = ["–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è", "–í–æ–¥–∞", "–ö–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è", "–û—Ç–æ–ø–ª–µ–Ω–∏–µ", "–§–∏–∫—Å. –ø–ª–∞—Ç–µ–∂–∏"]
HEATING_MONTHS = [1,2,3,4,10,11,12]

# ------------------------
# –§—É–Ω–∫—Ü–∏–∏ —Ä–∞—Å—á—ë—Ç–∞
# ------------------------
def calculate_volumes(area_m2, occupants, behavior_factor, coeffs=DEFAULT_COEFFS, month=1):
    elec = (coeffs["elec_base_kWh"] + coeffs["elec_per_person_kWh"]*occupants +
            coeffs["elec_per_m2_kWh"]*area_m2) * behavior_factor
    water = coeffs["water_per_person_m3"]*occupants*behavior_factor
    hot_water = water * coeffs["hot_water_fraction"]
    sewage = water
    if month in HEATING_MONTHS:
        G_mid = coeffs["heating_Gcal_per_m2_season_mid"] * area_m2
        heat_monthly = G_mid / coeffs["heating_season_months"]
    else:
        heat_monthly = 0.0
    return {
        "–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è": round(elec,1),
        "–í–æ–¥–∞": round(water,2),
        "–ì–æ—Ä—è—á–∞—è –≤–æ–¥–∞": round(hot_water,2),
        "–ö–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è": round(sewage,2),
        "–û—Ç–æ–ø–ª–µ–Ω–∏–µ": round(heat_monthly,3)
    }

def calculate_costs_from_volumes(volumes, tariffs, area_m2=50, occupants=1, floor=1, has_elevator=True, subsidy=False, subsidy_rate=0.2):
    t = tariffs.copy()
    if subsidy:
        t["heating_BYN_per_Gcal"] *= subsidy_rate

    elec_cost = volumes["–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è"] * t["electricity_BYN_per_kWh"]
    water_cost = volumes["–í–æ–¥–∞"] * t["water_BYN_per_m3"]
    sewage_cost = volumes["–ö–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è"] * t["sewage_BYN_per_m3"]
    heat_cost = volumes["–û—Ç–æ–ø–ª–µ–Ω–∏–µ"] * t["heating_BYN_per_Gcal"]

    # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏
    maintenance_max = 0.0388
    lighting_max = 0.0249
    waste_norm = 0.2092
    elevator_max = 0.88
    capital_repair_rate = 0.05

    maintenance_cost = area_m2 * maintenance_max
    lighting_cost = area_m2 * lighting_max
    waste_cost = waste_norm * occupants
    capital_repair_cost = area_m2 * capital_repair_rate
    elevator_cost = elevator_max * occupants if has_elevator and floor >= 2 else 0.0

    fixed = maintenance_cost + lighting_cost + waste_cost + capital_repair_cost + elevator_cost

    costs = {
        "–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è": round(elec_cost,2),
        "–í–æ–¥–∞": round(water_cost,2),
        "–ö–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è": round(sewage_cost,2),
        "–û—Ç–æ–ø–ª–µ–Ω–∏–µ": round(heat_cost,2),
        "–§–∏–∫—Å. –ø–ª–∞—Ç–µ–∂–∏": round(fixed,2)
    }
    costs["–ò—Ç–æ–≥–æ"] = round(sum(costs.values()),2)
    return costs

def apply_neighbor_adjustment(volumes, tariffs, house_category, area_m2, occupants, floor=1, has_elevator=True):
    coefs = HOUSE_COEFS.get(house_category, {"heating":1.0,"electricity":1.0})
    vol_adj = volumes.copy()
    vol_adj["–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è"] = vol_adj["–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è"] * coefs["electricity"]
    vol_adj["–û—Ç–æ–ø–ª–µ–Ω–∏–µ"] = vol_adj["–û—Ç–æ–ø–ª–µ–Ω–∏–µ"] * coefs["heating"]
    neighbor_costs = calculate_costs_from_volumes(vol_adj, tariffs, area_m2, occupants, floor, has_elevator)
    neighbor_costs = {k: round(v * REALISM_UPLIFT, 2) for k, v in neighbor_costs.items()}
    return neighbor_costs

# ------------------------
# Sidebar: –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–µ–º—å–∏
# ------------------------
st.sidebar.header("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–µ–º—å–∏")
month = st.sidebar.selectbox("–ú–µ—Å—è—Ü", list(range(1,13)),
                             format_func=lambda x: ["–Ø–Ω–≤","–§–µ–≤","–ú–∞—Ä","–ê–ø—Ä","–ú–∞–π","–ò—é–Ω","–ò—é–ª","–ê–≤–≥","–°–µ–Ω","–û–∫—Ç","–ù–æ—è","–î–µ–∫"][x-1])
area_m2 = st.sidebar.number_input("–ü–ª–æ—â–∞–¥—å, –º¬≤", 10.0, 500.0, 90.0)
adults = st.sidebar.number_input("–í–∑—Ä–æ—Å–ª—ã–µ", 0,10,2)
children = st.sidebar.number_input("–î–µ—Ç–∏", 0,10,1)
occupants = adults + children

scenario = st.sidebar.selectbox("–°—Ü–µ–Ω–∞—Ä–∏–π –ø–æ–≤–µ–¥–µ–Ω–∏—è", list(SCENARIOS.keys()), index=1)
behavior_factor = SCENARIOS[scenario]
house_category = st.sidebar.selectbox("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ–º–∞", list(HOUSE_COEFS.keys()), index=1)

st.sidebar.markdown("---")
use_subsidy = st.sidebar.checkbox("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª—å–≥–æ—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ")
subsidy_rate = st.sidebar.slider("–î–æ–ª—è –æ—Ç –ø–æ–ª–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞", 0.0, 1.0, 0.2, 0.05) if use_subsidy else 1.0

# ------------------------
# –í–≤–æ–¥ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤
# ------------------------
st.header("üìä –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ —Ä–µ–∞–ª—å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ –º–µ—Å—è—Ü (BYN)")
with st.expander("–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—è –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞"):
    user_real = {cat: st.number_input(f"{cat} BYN", min_value=0.0, value=0.0, step=0.1, format="%.2f") for cat in CATEGORIES}
user_real["–ò—Ç–æ–≥–æ"] = round(sum(user_real.values()), 2)

# ------------------------
# –†–∞—Å—á—ë—Ç –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ –∏ —Å—Ä–µ–¥–Ω–µ–≥–æ —Å–æ—Å–µ–¥–∞
# ------------------------
ideal_vol = calculate_volumes(area_m2, occupants, 1.0, month=month)
ideal_costs = calculate_costs_from_volumes(ideal_vol, DEFAULT_TARIFFS, area_m2, occupants)

neighbor_vol = calculate_volumes(area_m2, occupants, behavior_factor, month=month)
neighbor_costs = apply_neighbor_adjustment(neighbor_vol, DEFAULT_TARIFFS, house_category, area_m2, occupants)

# ------------------------
# –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
# ------------------------
st.header("üè† –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–æ–≤")
col1, col2 = st.columns([2, 2])

with col1:
    st.metric("–ò–¥–µ–∞–ª—å–Ω—ã–π —Ä–∞—Å—á—ë—Ç –ø–æ –Ω–æ—Ä–º–∞—Ç–∏–≤–∞–º, BYN", f"{ideal_costs['–ò—Ç–æ–≥–æ']:.2f}")
    st.metric("–í–∞—à–∏ —Ä–µ–∞–ª—å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã, BYN", f"{user_real['–ò—Ç–æ–≥–æ']:.2f}")
    st.metric("–°—Ä–µ–¥–Ω–∏–π —Å–æ—Å–µ–¥, BYN", f"{neighbor_costs['–ò—Ç–æ–≥–æ']:.2f}")

with col2:
    detail_df = pd.DataFrame({
        "–ö–∞—Ç–µ–≥–æ—Ä–∏—è": CATEGORIES,
        "–ò–¥–µ–∞–ª—å–Ω—ã–π —Ä–∞—Å—á—ë—Ç (BYN)": [ideal_costs[c] for c in CATEGORIES],
        "–í–∞—à–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (BYN)": [user_real[c] for c in CATEGORIES],
        "–°—Ä–µ–¥–Ω–∏–π —Å–æ—Å–µ–¥ (BYN)": [neighbor_costs[c] for c in CATEGORIES],
    })
    st.dataframe(detail_df.style.format({
        "–ò–¥–µ–∞–ª—å–Ω—ã–π —Ä–∞—Å—á—ë—Ç (BYN)": "{:.2f}",
        "–í–∞—à–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (BYN)": "{:.2f}",
        "–°—Ä–µ–¥–Ω–∏–π —Å–æ—Å–µ–¥ (BYN)": "{:.2f}"
    }).background_gradient(cmap='Blues'), height=300)

# ------------------------
# –ì—Ä–∞—Ñ–∏–∫ —Ä–∞—Å—Ö–æ–¥–æ–≤
# ------------------------
plot_df = pd.DataFrame({
    "–ö–∞—Ç–µ–≥–æ—Ä–∏—è": CATEGORIES * 3,
    "–¢–∏–ø": (['–ò–¥–µ–∞–ª—å–Ω—ã–π —Ä–∞—Å—á—ë—Ç']*len(CATEGORIES)) + (['–í–∞—à–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ']*len(CATEGORIES)) + (['–°—Ä–µ–¥–Ω–∏–π —Å–æ—Å–µ–¥']*len(CATEGORIES)),
    "BYN": [ideal_costs[c] for c in CATEGORIES] + [user_real[c] for c in CATEGORIES] + [neighbor_costs[c] for c in CATEGORIES]
})
fig = px.bar(plot_df, x="–ö–∞—Ç–µ–≥–æ—Ä–∏—è", y="BYN", color="–¢–∏–ø", barmode="group",
             color_discrete_map={"–ò–¥–µ–∞–ª—å–Ω—ã–π —Ä–∞—Å—á—ë—Ç":"#636EFA","–í–∞—à–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ":"#00CC96","–°—Ä–µ–¥–Ω–∏–π —Å–æ—Å–µ–¥":"#EF553B"},
             text="BYN")
fig.update_traces(texttemplate='%{text:.2f}', textposition='outside')
fig.update_layout(yaxis_title="BYN / –º–µ—Å—è—Ü", legend_title_text="–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å", uniformtext_minsize=8)
st.plotly_chart(fig, use_container_width=True)

# ------------------------
# üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å –º–∏–Ω–∏-–¥–∞—à–±–æ—Ä–¥–æ–º
# ------------------------
emoji_map = {
    "–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è": "üí°",
    "–í–æ–¥–∞": "üö∞",
    "–û—Ç–æ–ø–ª–µ–Ω–∏–µ": "üî•",
    "–ö–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è": "üíß"
}

tips_map = {
    "–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è": "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç–Ω–µ—Ä–≥–æ—Å–±–µ—Ä–µ–≥–∞—é—â–∏–µ –ª–∞–º–ø—ã –∏ –ø—Ä–∏–±–æ—Ä—ã.",
    "–í–æ–¥–∞": "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∞—ç—Ä–∞—Ç–æ—Ä—ã –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç—Ä—É–±—ã –Ω–∞ –ø—Ä–æ—Ç–µ—á–∫–∏.",
    "–û—Ç–æ–ø–ª–µ–Ω–∏–µ": "–ó–∞–∫—Ä—ã–≤–∞–π—Ç–µ –æ–∫–Ω–∞ –∏ –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ —Ç–µ—Ä–º–æ—Ä–µ–≥—É–ª—è—Ç–æ—Ä—ã.",
    "–ö–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è": "–ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–π—Ç–µ —Ä–∞—Å—Ö–æ–¥ –≤–æ–¥—ã –∏ –∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç—å —Å–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∏."
}

def format_percentage(diff, ideal):
    """–ü—Ä–æ—Ü–µ–Ω—Ç –ø–µ—Ä–µ—Ä–∞—Å—Ö–æ–¥–∞ (–æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞)"""
    perc = (diff / ideal) * 100 if ideal > 0 else 0
    return max(min(perc, 150), 0)  # –æ–≥—Ä–∞–Ω–∏—á–∏–º 0-150%

def get_gradient_color(perc):
    """–ü–ª–∞–≤–Ω—ã–π –≥—Ä–∞–¥–∏–µ–Ω—Ç –æ—Ç –∑–µ–ª—ë–Ω–æ–≥–æ –∫ –∫—Ä–∞—Å–Ω–æ–º—É"""
    if perc <= 0:
        return "#66BB6A"
    elif perc <= 50:
        return "#FFEB3B"
    elif perc <= 100:
        return "#FF9800"
    else:
        return "#F44336"

st.header("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —ç–∫–æ–Ω–æ–º–∏–∏ ‚Äî –º–∏–Ω–∏-–¥–∞—à–±–æ—Ä–¥")

# –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
cols = st.columns(len(["–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è","–í–æ–¥–∞","–û—Ç–æ–ø–ª–µ–Ω–∏–µ","–ö–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è"]))

for i, cat in enumerate(["–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è","–í–æ–¥–∞","–û—Ç–æ–ø–ª–µ–Ω–∏–µ","–ö–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è"]):
    diff = user_real[cat] - ideal_costs[cat]
    perc = format_percentage(diff, ideal_costs[cat])

    with cols[i]:
        st.markdown(f"<div style='text-align:center; font-size:1.5em'>{emoji_map[cat]}</div>", unsafe_allow_html=True)
        st.markdown(f"**{cat}**")

        # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º
        st.markdown(f"""
            <div style='background-color:#E0E0E0; border-radius:8px; height:14px; width:100%; margin-bottom:6px;'>
                <div style='width:{perc}%; background: {get_gradient_color(perc)};
                            height:100%; border-radius:8px; transition: width 1s;'>
                </div>
            </div>
        """, unsafe_allow_html=True)

        # –¢–µ–∫—Å—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if diff > 0:
            st.markdown(f"<small style='color:#D32F2F'>–ü–µ—Ä–µ—Ä–∞—Å—Ö–æ–¥: {diff:.2f} BYN</small>", unsafe_allow_html=True)
            st.markdown(f"<small>{tips_map[cat]}</small>", unsafe_allow_html=True)
        else:
            st.markdown(f"<small style='color:#388E3C'>–†–∞—Å—Ö–æ–¥ –≤ –Ω–æ—Ä–º–µ</small>", unsafe_allow_html=True)
