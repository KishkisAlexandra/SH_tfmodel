# app.py
import streamlit as st
import pandas as pd
import plotly.express as px
from datetime import datetime

st.set_page_config(page_title="Utility Benchmark ‚Äî —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –¥–∞—à–±–æ—Ä–¥", page_icon="üè†", layout="wide")

# ------------------------
# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ / –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
# ------------------------
# –ê—Ä—Ö–µ—Ç–∏–ø—ã (–ø—Ä–∏–¥—É–º–∞–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∏ "—Ñ–∞–∫—Ç–æ—Ä—ã" –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è)
ARCHETYPES = {
    "–û–¥–∏–Ω–æ–∫–∏–π –∂–∏—Ç–µ–ª—å": 0.8,
    "–ü–∞—Ä–∞": 0.95,
    "–°–µ–º—å—è —Å –¥–µ—Ç—å–º–∏": 1.1,
    "–ë–æ–ª—å—à–∞—è —Å–µ–º—å—è": 1.25
}

# eco/avg/int
SCENARIOS = {"–≠–∫–æ–Ω–æ–º–Ω—ã–π": 0.85, "–°—Ä–µ–¥–Ω–∏–π": 1.0, "–†–∞—Å—Ç–æ—á–∏—Ç–µ–ª—å–Ω—ã–π": 1.25}

DEFAULT_TARIFFS = {
    "electricity_BYN_per_kWh": 0.254,
    "water_BYN_per_m3": 1.7858,
    "sewage_BYN_per_m3": 0.9586,
    "heating_BYN_per_Gcal": 135.0,
    "fixed_fees_BYN": 5.0
}

DEFAULT_COEFFS = {
    "elec_base_kWh": 40.0,
    "elec_per_person_kWh": 35.0,
    "elec_per_m2_kWh": 0.25,
    "water_per_person_m3": 3.5,
    "hot_water_fraction": 0.45,
    "heating_Gcal_per_m2_season_mid": 0.10,
    "heating_season_months": 7.0
}

# ------------------------
# –§—É–Ω–∫—Ü–∏–∏ —Ä–∞—Å—á—ë—Ç–∞
# ------------------------
def calculate_volumes(area_m2, occupants, behavior_factor, coeffs=DEFAULT_COEFFS, month=1):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä—ë–º—ã: —ç–ª–µ–∫—Ç—Ä-–≤–æ, –≤–æ–¥–∞, –∫–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è, –æ—Ç–æ–ø–ª–µ–Ω–∏–µ (Gcal/–º–µ—Å mid)"""
    elec = (coeffs["elec_base_kWh"] + coeffs["elec_per_person_kWh"]*occupants +
            coeffs["elec_per_m2_kWh"]*area_m2) * behavior_factor
    water = coeffs["water_per_person_m3"]*occupants*behavior_factor
    hot_water = water * coeffs["hot_water_fraction"]
    sewage = water
    # –û—Ç–æ–ø–ª–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–∞–µ–º —Å –∞–ø—Ä–µ–ª—è –ø–æ –æ–∫—Ç—è–±—Ä—å
    if 4 <= month <= 10:
        heat_monthly = 0.0
    else:
        G_mid = coeffs["heating_Gcal_per_m2_season_mid"] * area_m2
        heat_monthly = G_mid / coeffs["heating_season_months"]
    return {
        "electricity_kWh": round(elec, 1),
        "water_m3": round(water, 2),
        "hot_water_m3": round(hot_water, 2),
        "sewage_m3": round(sewage, 2),
        "heating_Gcal_month_mid": round(heat_monthly, 3)
    }

def calculate_costs(volumes, tariffs, subsidy=False, subsidy_rate=0.2):
    """
    –í—ã—á–∏—Å–ª—è–µ—Ç —Ä–∞—Å—Ö–æ–¥—ã –ø–æ —Å—Ç–∞—Ç—å—è–º. 
    subsidy=True –ø—Ä–∏–º–µ–Ω—è–µ—Ç –ª—å–≥–æ—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ –∫ –æ—Ç–æ–ø–ª–µ–Ω–∏—é –∏ –ø–æ–¥–æ–≥—Ä–µ–≤—É –≤–æ–¥—ã (–∏–ª–ª—é—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ).
    subsidy_rate ‚Äî –¥–æ–ª—è –æ—Ç –ø–æ–ª–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä 0.2 ‚Äî 20% –æ—Ç –ø–æ–ª–Ω–æ–≥–æ).
    """
    # —Ç–∞—Ä–∏—Ñ—ã (–∫–æ–ø–∏—Ä—É–µ–º)
    t = tariffs.copy()
    # –µ—Å–ª–∏ —Å—É–±—Å–∏–¥–∏—è ‚Äî —É–º–µ–Ω—å—à–∞–µ–º —Ç–∞—Ä–∏—Ñ –Ω–∞ –æ—Ç–æ–ø–ª–µ–Ω–∏–µ –∏ (–ª–æ–≥–∏—á–Ω–æ) –Ω–∞ —Ä–∞—Å—á—ë—Ç –ì–∫–∞–ª –¥–ª—è –ø–æ–¥–æ–≥—Ä–µ–≤–∞ –≤–æ–¥—ã
    if subsidy:
        # –ó–¥–µ—Å—å –º—ã –ø—Ä–∏–º–µ–Ω—è–µ–º subsidy_rate –∫ —Ç–∞—Ä–∏—Ñ—É –Ω–∞ –æ—Ç–æ–ø–ª–µ–Ω–∏–µ.
        # –≠—Ç–æ —É–ø—Ä–æ—â–µ–Ω–∏–µ: —Ä–µ–∞–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –º–æ–≥—É—Ç –±—ã—Ç—å —Å–ª–æ–∂–Ω–µ–µ (–¥–æ–ª–∏ –ø–æ –ª—é–¥—è–º, –ø—Ä–µ—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ –∏ —Ç.–ø.)
        t["heating_BYN_per_Gcal"] = t["heating_BYN_per_Gcal"] * subsidy_rate

    elec_cost = volumes["electricity_kWh"] * t["electricity_BYN_per_kWh"]
    water_cost = volumes["water_m3"] * t["water_BYN_per_m3"]
    sewage_cost = volumes["sewage_m3"] * t["sewage_BYN_per_m3"]
    heat_cost = volumes["heating_Gcal_month_mid"] * t["heating_BYN_per_Gcal"]
    fixed = t.get("fixed_fees_BYN", 0.0)

    costs = {
        "–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è": round(elec_cost, 2),
        "–í–æ–¥–∞": round(water_cost, 2),
        "–ö–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è": round(sewage_cost, 2),
        "–û—Ç–æ–ø–ª–µ–Ω–∏–µ": round(heat_cost, 2),
        "–§–∏–∫—Å. –ø–ª–∞—Ç–µ–∂–∏": round(fixed, 2)
    }
    costs["–ò—Ç–æ–≥–æ"] = round(sum(costs.values()), 2)
    return costs

# ------------------------
# UI: Sidebar (–≤–≤–æ–¥)
# ------------------------
st.sidebar.header("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∂–∏–ª—å—è –∏ —Ä–∞—Å—á—ë—Ç–∞")
month = st.sidebar.selectbox("–ú–µ—Å—è—Ü", list(range(1,13)), format_func=lambda x:
                             ["–Ø–Ω–≤","–§–µ–≤","–ú–∞—Ä","–ê–ø—Ä","–ú–∞–π","–ò—é–Ω","–ò—é–ª","–ê–≤–≥","–°–µ–Ω","–û–∫—Ç","–ù–æ—è","–î–µ–∫"][x-1])
area_m2 = st.sidebar.number_input("–ü–ª–æ—â–∞–¥—å, –º¬≤", min_value=10.0, max_value=500.0, value=90.0)
adults = st.sidebar.number_input("–í–∑—Ä–æ—Å–ª—ã–µ", min_value=0, max_value=10, value=2)
children = st.sidebar.number_input("–î–µ—Ç–∏", min_value=0, max_value=10, value=1)
occupants = int(adults + children)

behavior = st.sidebar.selectbox("–°—Ü–µ–Ω–∞—Ä–∏–π –ø–æ–≤–µ–¥–µ–Ω–∏—è", list(SCENARIOS.keys()), index=1)
behavior_factor = SCENARIOS[behavior]

archetype_name = st.sidebar.selectbox("–°—Ä–∞–≤–Ω–∏—Ç—å —Å –ø—Ä–æ—Ñ–∏–ª–µ–º (–∞—Ä—Ö–µ—Ç–∏–ø)", list(ARCHETYPES.keys()), index=3)
archetype_factor = ARCHETYPES[archetype_name]

# –ª—å–≥–æ—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ
st.sidebar.markdown("---")
use_subsidy = st.sidebar.checkbox("–†–∞—Å—Å—á–∏—Ç—ã–≤–∞—Ç—å –ø–æ –ª—å–≥–æ—Ç–Ω–æ–º—É —Ç–∞—Ä–∏—Ñ—É (—Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ/–∞–¥—Ä–µ—Å–Ω—ã–µ –ª—å–≥–æ—Ç—ã)")
if use_subsidy:
    st.sidebar.caption("–ü—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è —Å–Ω–∏–∂–∞—é—â–∏–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∫ —Ç–∞—Ä–∏—Ñ—É –Ω–∞ –æ—Ç–æ–ø–ª–µ–Ω–∏–µ (–∏–ª–ª—é—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ).")
    subsidy_rate = st.sidebar.slider("–î–æ–ª—è –æ—Ç –ø–æ–ª–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞ (—á–µ–≥–æ —Å–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è) ‚Äî subsidy_rate", 0.0, 1.0, 0.2, 0.05)
else:
    subsidy_rate = 1.0

st.sidebar.markdown("---")
st.sidebar.write("–¢–∞—Ä–∏—Ñ—ã (BYN) ‚Äî –º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å")
t_elec = st.sidebar.number_input("–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è BYN/kWh", value=DEFAULT_TARIFFS["electricity_BYN_per_kWh"], format="%.6f")
t_water = st.sidebar.number_input("–í–æ–¥–∞ BYN/m¬≥", value=DEFAULT_TARIFFS["water_BYN_per_m3"], format="%.6f")
t_sewage = st.sidebar.number_input("–ö–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è BYN/m¬≥", value=DEFAULT_TARIFFS["sewage_BYN_per_m3"], format="%.6f")
t_heating = st.sidebar.number_input("–û—Ç–æ–ø–ª–µ–Ω–∏–µ BYN/Gcal", value=DEFAULT_TARIFFS["heating_BYN_per_Gcal"], format="%.2f")
t_fixed = st.sidebar.number_input("–§–∏–∫—Å. –ø–ª–∞—Ç–µ–∂–∏ BYN/–º–µ—Å", value=DEFAULT_TARIFFS["fixed_fees_BYN"], format="%.2f")

tariffs = {
    "electricity_BYN_per_kWh": float(t_elec),
    "water_BYN_per_m3": float(t_water),
    "sewage_BYN_per_m3": float(t_sewage),
    "heating_BYN_per_Gcal": float(t_heating),
    "fixed_fees_BYN": float(t_fixed)
}

st.sidebar.markdown("---")
st.sidebar.caption("–ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—á–µ—Ç–æ–≤ –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∏–Ω–∞–º–∏–∫—É (–≥—Ä–∞—Ñ–∏–∫ –±–µ–∑ —É—á—ë—Ç–∞ –æ—Ç–æ–ø–ª–µ–Ω–∏—è).")

# ------------------------
# –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞—Å—á—ë—Ç—ã
# ------------------------
# –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
user_vol = calculate_volumes(area_m2, occupants, behavior_factor, month=month)
user_costs = calculate_costs(user_vol, tariffs, subsidy=use_subsidy, subsidy_rate=subsidy_rate)

# —Ç–∏–ø–æ–≤–æ–π (–∞—Ä—Ö–µ—Ç–∏–ø) ‚Äî –±–µ—Ä—ë–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ '–°—Ä–µ–¥–Ω–∏–π' + –∞—Ä—Ö–µ—Ç–∏–ø factor
typical_vol = calculate_volumes(area_m2, occupants, archetype_factor, month=month)
typical_costs = calculate_costs(typical_vol, tariffs, subsidy=False)

# –¥–∏–∞–ø–∞–∑–æ–Ω eco/avg/int –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ (–Ω–∞ —Ç–æ–π –∂–µ –ø–ª–æ—â–∞–¥–∏/–∫–æ–ª-–≤–µ –ª—é–¥–µ–π)
eco_vol = calculate_volumes(area_m2, occupants, SCENARIOS["–≠–∫–æ–Ω–æ–º–Ω—ã–π"], month=month)
eco_costs = calculate_costs(eco_vol, tariffs, subsidy=False)
int_vol = calculate_volumes(area_m2, occupants, SCENARIOS["–†–∞—Å—Ç–æ—á–∏—Ç–µ–ª—å–Ω—ã–π"], month=month)
int_costs = calculate_costs(int_vol, tariffs, subsidy=False)

# ------------------------
# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ (session_state)
# ------------------------
if 'history' not in st.session_state:
    st.session_state.history = []  # –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç: dict —Å keys: ts, month, total_with_heat, total_no_heat

def save_current():
    # —Å–æ–±–∏—Ä–∞–µ–º –∑–∞–ø–∏—Å—å: month, totals (with heating), total without heating (–¥–ª—è —Ç—Ä–µ–Ω–¥–∞)
    # –î–ª—è total_without_heating –ø–µ—Ä–µ—Å—á–∏—Ç–∞–µ–º –±–µ–∑ –æ—Ç–æ–ø–ª–µ–Ω–∏—è:
    vol_no_heat = user_vol.copy()
    vol_no_heat["heating_Gcal_month_mid"] = 0.0
    costs_no_heat = calculate_costs(vol_no_heat, tariffs, subsidy=use_subsidy, subsidy_rate=subsidy_rate)
    rec = {
        "timestamp": datetime.utcnow().isoformat(),
        "month": month,
        "total_with_heat": user_costs["–ò—Ç–æ–≥–æ"],
        "total_no_heat": costs_no_heat["–ò—Ç–æ–≥–æ"],
        "area_m2": area_m2,
        "occupants": occupants,
        "profile": behavior,
        "archetype": archetype_name
    }
    st.session_state.history.append(rec)
    st.success("–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –∏—Å—Ç–æ—Ä–∏—é.")

st.header("üè† –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á—ë—Ç–∞ (–±—ã—Å—Ç—Ä—ã–π –æ–±–∑–æ—Ä)")
st.subheader(f"–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø—Ä–æ—Ñ–∏–ª–µ–º: ¬´{archetype_name}¬ª")

col1, col2 = st.columns([2, 1])
with col1:
    st.markdown(f"**–í–∞—à —Å—á—ë—Ç:** {user_costs['–ò—Ç–æ–≥–æ']} BYN")
    st.markdown(f"**–¢–∏–ø–æ–≤–æ–π —Å—á—ë—Ç (–∞—Ä—Ö–µ—Ç–∏–ø ¬´{archetype_name}¬ª):** {typical_costs['–ò—Ç–æ–≥–æ']} BYN")
    diff = user_costs["–ò—Ç–æ–≥–æ"] - typical_costs["–ò—Ç–æ–≥–æ"]
    pct = (diff / typical_costs["–ò—Ç–æ–≥–æ"]) * 100 if typical_costs["–ò—Ç–æ–≥–æ"] != 0 else 0.0
    if diff > 0:
        st.markdown(f"**–ê–Ω–∞–ª–∏—Ç–∏–∫–∞:** –í–∞—à–∏ —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ **{pct:.1f}% –≤—ã—à–µ**, —á–µ–º —É —Ç–∏–ø–æ–≤–æ–≥–æ –¥–æ–º–æ—Ö–æ–∑—è–π—Å—Ç–≤–∞. üí° –ï—Å—Ç—å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏.")
    else:
        st.markdown(f"**–ê–Ω–∞–ª–∏—Ç–∏–∫–∞:** –í–∞—à–∏ —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ **{abs(pct):.1f}% –Ω–∏–∂–µ** —Ç–∏–ø–æ–≤–æ–≥–æ –¥–æ–º–æ—Ö–æ–∑—è–π—Å—Ç–≤–∞. ‚úÖ –û—Ç–ª–∏—á–Ω–æ!")
    st.markdown("---")
    st.markdown("**–†–∞–∑–±–∏–≤–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º (BYN):**")
    cat_df = pd.DataFrame({
        "–ö–∞—Ç–µ–≥–æ—Ä–∏—è": list(user_costs.keys())[:-1],
        "–í–∞—à–∏ —Ä–∞—Å—Ö–æ–¥—ã": [user_costs[k] for k in list(user_costs.keys())[:-1]],
        "–¢–∏–ø–æ–≤—ã–µ —Ä–∞—Å—Ö–æ–¥—ã": [typical_costs[k] for k in list(user_costs.keys())[:-1]],
    })
    # –ø–æ–∫–∞–∂–µ–º —Ç–∞–±–ª–∏—Ü—É –∫–æ–º–ø–∞–∫—Ç–Ω–æ
    st.dataframe(cat_df.style.format({"–í–∞—à–∏ —Ä–∞—Å—Ö–æ–¥—ã": "{:.2f}", "–¢–∏–ø–æ–≤—ã–µ —Ä–∞—Å—Ö–æ–¥—ã": "{:.2f}"}), height=220)

    # –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é
    if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é"):
        save_current()

with col2:
    st.metric("–ò—Ç–æ–≥–æ (BYN/–º–µ—Å) ‚Äî –í—ã", f"{user_costs['–ò—Ç–æ–≥–æ']}")
    st.metric("–ò—Ç–æ–≥–æ (BYN/–º–µ—Å) ‚Äî –¢–∏–ø–æ–≤–æ–µ", f"{typical_costs['–ò—Ç–æ–≥–æ']}")
    st.metric("–°—Ü–µ–Ω–∞—Ä–∏–π –ø–æ–≤–µ–¥–µ–Ω–∏—è", f"{behavior}")
    st.metric("–ê—Ä—Ö–µ—Ç–∏–ø —Å—Ä–∞–≤–Ω–µ–Ω–∏—è", f"{archetype_name}")

st.markdown("---")

# ------------------------
# –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è: —Ü–≤–µ—Ç–Ω–æ–π –≥—Ä—É–ø–ø–æ–≤–æ–π –±–∞—Ä (Plotly)
# ------------------------
st.subheader("–ì—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–æ–≤ (—Ü–≤–µ—Ç–∞: –≤–∞—à–∏ / —Ç–∏–ø–æ–≤—ã–µ / –¥–∏–∞–ø–∞–∑–æ–Ω eco..int)")

# –ü–æ—Å—Ç—Ä–æ–∏–º df –¥–ª—è bar chart: –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ‚Äî eco/you/typical/int
categories = list(user_costs.keys())[:-1]  # –∏—Å–∫–ª—é—á–∞–µ–º '–ò—Ç–æ–≥–æ'
rows = []
for cat in categories:
    rows.append({"–ö–∞—Ç–µ–≥–æ—Ä–∏—è": cat, "–¢–∏–ø": "–≠–∫–æ–Ω–æ–º–Ω—ã–π (eco)", "BYN": eco_costs[cat]})
    rows.append({"–ö–∞—Ç–µ–≥–æ—Ä–∏—è": cat, "–¢–∏–ø": "–í–∞—à–∏", "BYN": user_costs[cat]})
    rows.append({"–ö–∞—Ç–µ–≥–æ—Ä–∏—è": cat, "–¢–∏–ø": "–¢–∏–ø–æ–≤–æ–µ (–∞—Ä—Ö–µ—Ç–∏–ø)", "BYN": typical_costs[cat]})
    rows.append({"–ö–∞—Ç–µ–≥–æ—Ä–∏—è": cat, "–¢–∏–ø": "–†–∞—Å—Ç–æ—á–∏—Ç–µ–ª—å–Ω—ã–π (int)", "BYN": int_costs[cat]})

plot_df = pd.DataFrame(rows)

fig = px.bar(plot_df, x="–ö–∞—Ç–µ–≥–æ—Ä–∏—è", y="BYN", color="–¢–∏–ø", barmode="group",
             color_discrete_map={
                 "–≠–∫–æ–Ω–æ–º–Ω—ã–π (eco)": "lightgreen",
                 "–í–∞—à–∏": "royalblue",
                 "–¢–∏–ø–æ–≤–æ–µ (–∞—Ä—Ö–µ—Ç–∏–ø)": "orange",
                 "–†–∞—Å—Ç–æ—á–∏—Ç–µ–ª—å–Ω—ã–π (int)": "salmon"
             })
fig.update_layout(height=520, legend_title_text="–°—Ä–∞–≤–Ω–µ–Ω–∏–µ")
st.plotly_chart(fig, use_container_width=True)

st.markdown("---")

# ------------------------
# –î–∏–Ω–∞–º–∏–∫–∞: –∏—Å—Ç–æ—Ä–∏—è –∏ –≥—Ä–∞—Ñ–∏–∫ –ø–æ –º–µ—Å—è—Ü–∞–º (–±–µ–∑ –æ—Ç–æ–ø–ª–µ–Ω–∏—è)
# ------------------------
st.subheader("–î–∏–Ω–∞–º–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Ä–∞—Å—á—ë—Ç–æ–≤ (—Ç—Ä–µ–Ω–¥ —Ä–∞—Å—Ö–æ–¥–æ–≤ –±–µ–∑ –æ—Ç–æ–ø–ª–µ–Ω–∏—è)")

if st.session_state.history:
    hist_df = pd.DataFrame(st.session_state.history)
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –º–µ—Å—è—Ü –≤ –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏, –¥–æ–±–∞–≤–∏–º –º–µ—Ç–∫—É –≤—Ä–µ–º–µ–Ω–∏
    hist_df['ts'] = pd.to_datetime(hist_df['timestamp'])
    hist_df = hist_df.sort_values('ts')
    # –ª–∏–Ω–∏—è –ø–æ total_no_heat
    fig_trend = px.line(hist_df, x='ts', y='total_no_heat', markers=True,
                        title="–¢—Ä–µ–Ω–¥: —Ä–∞—Å—Ö–æ–¥—ã –±–µ–∑ —É—á—ë—Ç–∞ –æ—Ç–æ–ø–ª–µ–Ω–∏—è (BYN)")
    fig_trend.update_xaxes(title_text="–î–∞—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
    fig_trend.update_yaxes(title_text="BYN (–±–µ–∑ –æ—Ç–æ–ø–ª–µ–Ω–∏—è)")
    st.plotly_chart(fig_trend, use_container_width=True)

    # –¢–∞–±–ª–∏—Ü–∞ –∏ —ç–∫—Å–ø–æ—Ä—Ç CSV
    st.dataframe(hist_df[['ts','month','total_with_heat','total_no_heat','area_m2','occupants','profile','archetype']].rename(columns={
        'ts':'–î–∞—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è','month':'–ú–µ—Å—è—Ü','total_with_heat':'–ò—Ç–æ–≥–æ (—Å –æ—Ç–æ–ø–ª.)',
        'total_no_heat':'–ò—Ç–æ–≥–æ (–±–µ–∑ –æ—Ç–æ–ø–ª.)','area_m2':'–ü–ª–æ—â–∞–¥—å','occupants':'–ü—Ä–æ–∂–∏–≤–∞—é—Ç','profile':'–°—Ü–µ–Ω–∞—Ä–∏–π','archetype':'–ê—Ä—Ö–µ—Ç–∏–ø'
    }), height=240)

    csv = hist_df.to_csv(index=False).encode('utf-8')
    st.download_button("–°–∫–∞—á–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é (CSV)", data=csv, file_name=f"utility_history_{datetime.utcnow().strftime('%Y%m%dT%H%M%SZ')}.csv", mime="text/csv")
else:
    st.info("–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞ ‚Äî —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Ä–∞—Å—á—ë—Ç –∫–Ω–æ–ø–∫–æ–π '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é'.")

st.markdown("---")

# ------------------------
# –ë–ª–æ–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π (–∞–Ω–∞–ª–∏–∑ –ø–æ —Å—Ç–∞—Ç—å—è–º)
# ------------------------
st.subheader("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã –ø–µ—Ä–µ—Ä–∞—Å—Ö–æ–¥–∞")

recs = []
threshold_pct = 15.0  # –ø–æ—Ä–æ–≥ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö)

for cat in categories:
    user_v = user_costs[cat]
    typ_v = typical_costs[cat] if typical_costs[cat] != 0 else 1e-6
    diff_pct = (user_v - typ_v) / typ_v * 100
    if diff_pct >= threshold_pct:
        # —Å–æ—Å—Ç–∞–≤–∏–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é
        if cat == "–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è":
            recs.append(f"üîå –≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è: –≤–∞—à–∏ —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ {diff_pct:.0f}% –≤—ã—à–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ: –Ω–∞–ª–∏—á–∏–µ —ç–Ω–µ—Ä–≥–æ–∑–∞—Ç—Ä–∞—Ç–Ω—ã—Ö –ø—Ä–∏–±–æ—Ä–æ–≤ (–æ–±–æ–≥—Ä–µ–≤–∞—Ç–µ–ª–∏, —Å—Ç–∞—Ä—ã–µ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–∏), —Ä–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã, –ª–∞–º–ø—ã ‚Äî –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ LED.")
        elif cat == "–í–æ–¥–∞":
            recs.append(f"üöø –í–æ–¥–∞: –≤–∞—à–∏ —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ {diff_pct:.0f}% –≤—ã—à–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–æ—Ç–µ—á–∫–∏, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥—É—à–∞, —Å—Ç–∞—Ä—ã–µ —Å–º–µ—Å–∏—Ç–µ–ª–∏ –∏ —ç–∫–æ–Ω–æ–º—å—Ç–µ –≥–æ—Ä—è—á—É—é –≤–æ–¥—É.")
        elif cat == "–ö–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è":
            recs.append(f"üõÅ –ö–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è: –ø–æ–≤—ã—à–µ–Ω–Ω—ã–µ –æ–±—ä—ë–º—ã –æ–±—ã—á–Ω–æ —Å–ª–µ–¥—É—é—Ç –∑–∞ –±–æ–ª—å—à–∏–º —Ä–∞—Å—Ö–æ–¥–æ–º –≤–æ–¥—ã ‚Äî –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–µ–º–µ–π–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏ –∏ —É—Ç–µ—á–∫–∏.")
        elif cat == "–û—Ç–æ–ø–ª–µ–Ω–∏–µ":
            recs.append(f"üî• –û—Ç–æ–ø–ª–µ–Ω–∏–µ: —Ä–∞—Å—Ö–æ–¥—ã –≤—ã—à–µ –Ω–∞ {diff_pct:.0f}%. –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã: –±–æ–ª—å—à–∏–µ –ø–ª–æ—â–∞–¥–∏, —Å–ª–∞–±–æ–µ —É—Ç–µ–ø–ª–µ–Ω–∏–µ, –¥–ª–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ–≤. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —É—Ç–µ–ø–ª–µ–Ω–∏–µ, —Ä–µ–≥—É–ª—è—Ç–æ—Ä—ã —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã, –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä—É–µ–º—ã–µ —Ç–µ—Ä–º–æ—Å—Ç–∞—Ç—ã.")
        else:
            recs.append(f"‚ÑπÔ∏è {cat}: —Ä–∞—Å—Ö–æ–¥—ã –≤—ã—à–µ –Ω–∞ {diff_pct:.0f}%. –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –¥–µ—Ç–∞–ª—å–Ω–æ —Å—á–µ—Ç–∞ –∏ –Ω–æ—Ä–º–∞—Ç–∏–≤—ã.")
# –ï—Å–ª–∏ –Ω–µ—Ç –∑–Ω–∞—á–∏–º—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:
if not recs:
    st.success("–ü–æ –∫–ª—é—á–µ–≤—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∑–Ω–∞—á–∏–º–æ–≥–æ –ø–µ—Ä–µ—Ä–∞—Å—Ö–æ–¥–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ. –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!")

# –û—Ç–æ–±—Ä–∞–∑–∏–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
for r in recs:
    st.markdown(r)

st.markdown("---")
st.caption("–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: —Ñ—É–Ω–∫—Ü–∏–∏ –ª—å–≥–æ—Ç (—Å—É–±—Å–∏–¥–∏–π) —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã —É–ø—Ä–æ—â—ë–Ω–Ω–æ ‚Äî —Ä–µ–∞–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –∑–∞–≤–∏—Å—è—Ç –æ—Ç –∑–∞–∫–æ–Ω–æ–≤/–ø–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π –∏ –∞–¥—Ä–µ—Å–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏. –î–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á—ë—Ç–∞ –ª—å–≥–æ—Ç —Ç—Ä–µ–±—É–µ—Ç—Å—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ª–æ–∫–∞–ª—å–Ω—ã–º–∏ –Ω–æ—Ä–º–∞—Ç–∏–≤–∞–º–∏ –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ú–∏–Ω—ç–∫–æ–Ω–æ–º–∏–∫–∏). :contentReference[oaicite:1]{index=1}")
