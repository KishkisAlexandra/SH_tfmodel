# app.py
import streamlit as st
import pandas as pd
import plotly.express as px

st.set_page_config(page_title="Utility Benchmark ‚Äî –¥–∞—à–±–æ—Ä–¥", page_icon="üè†", layout="wide")

# ------------------------
# –û–ë–©–ò–ï –ù–ê–°–¢–†–û–ô–ö–ò
# ------------------------
SCENARIOS = {"–≠–∫–æ–Ω–æ–º–Ω—ã–π": 0.85, "–°—Ä–µ–¥–Ω–∏–π": 1.0, "–†–∞—Å—Ç–æ—á–∏—Ç–µ–ª—å–Ω—ã–π": 1.25}
HOUSE_COEFS = {
    "–ù–æ–≤—ã–π": {"heating": 1.0, "electricity": 1.0},
    "–°—Ä–µ–¥–Ω–∏–π": {"heating": 1.05, "electricity": 1.05},
    "–°—Ç–∞—Ä—ã–π": {"heating": 1.1, "electricity": 1.05},
}
REALISM_UPLIFT = 1.07
MONTH_NAMES = ["–Ø–Ω–≤", "–§–µ–≤", "–ú–∞—Ä", "–ê–ø—Ä", "–ú–∞–π", "–ò—é–Ω", "–ò—é–ª", "–ê–≤–≥", "–°–µ–Ω", "–û–∫—Ç", "–ù–æ—è", "–î–µ–∫"]

# ----------------------------------------------------
# --- –î–ê–ù–ù–´–ï –ò –õ–û–ì–ò–ö–ê –î–õ–Ø –ú–ò–ù–°–ö–ê (–ë–ï–õ–ê–†–£–°–¨) ---
# ----------------------------------------------------
MINSK_CATEGORIES = ["–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è", "–í–æ–¥–∞", "–ö–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è", "–û—Ç–æ–ø–ª–µ–Ω–∏–µ", "–§–∏–∫—Å. –ø–ª–∞—Ç–µ–∂–∏"]
MINSK_HEATING_MONTHS = [1, 2, 3, 4, 10, 11, 12]

MINSK_DEFAULT_COEFFS = {
    "elec_base_kWh": 60.0,
    "elec_per_person_kWh": 75.0,
    "elec_per_m2_kWh": 0.5,
    "water_per_person_m3": 4.5,
    "hot_water_fraction": 0.6,
    "heating_Gcal_per_m2_season_mid": 0.15,
    "heating_season_months": 7.0
}

MINSK_TARIFFS = {
    "electricity_BYN_per_kWh_full": 0.2969,
    "electricity_BYN_per_kWh_subsidy": 0.2412,
    "heating_BYN_per_Gcal_full": 134.94,
    "heating_BYN_per_Gcal_subsidy": 24.7187,
    "water_BYN_per_m3": 1.7858,
    "sewage_BYN_per_m3": 0.9586,
    "fixed_fees_BYN": 5.0
}

def calculate_volumes_minsk(area_m2, occupants, behavior_factor, month=1):
    coeffs = MINSK_DEFAULT_COEFFS
    elec = (coeffs["elec_base_kWh"] + coeffs["elec_per_person_kWh"] * occupants +
            coeffs["elec_per_m2_kWh"] * area_m2) * behavior_factor
    water = coeffs["water_per_person_m3"] * occupants * behavior_factor
    sewage = water
    if month in MINSK_HEATING_MONTHS:
        G_mid = coeffs["heating_Gcal_per_m2_season_mid"] * area_m2
        heat_monthly = G_mid / coeffs["heating_season_months"]
    else:
        heat_monthly = 0.0
    return {
        "–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è": round(elec, 1),
        "–í–æ–¥–∞": round(water, 2),
        "–ö–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è": round(sewage, 2),
        "–û—Ç–æ–ø–ª–µ–Ω–∏–µ": round(heat_monthly, 3)
    }

def calculate_costs_minsk(volumes, tariffs, area_m2, occupants, floor=1, has_elevator=True):
    elec_cost = volumes["–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è"] * tariffs["electricity_BYN_per_kWh_subsidy"]
    water_cost = volumes["–í–æ–¥–∞"] * tariffs["water_BYN_per_m3"]
    sewage_cost = volumes["–ö–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è"] * tariffs["sewage_BYN_per_m3"]
    heat_cost = volumes["–û—Ç–æ–ø–ª–µ–Ω–∏–µ"] * tariffs["heating_BYN_per_Gcal_subsidy"]

    maintenance_cost = area_m2 * 0.0388
    lighting_cost = area_m2 * 0.0249
    waste_cost = 0.2092 * occupants
    capital_repair_cost = area_m2 * 0.05
    elevator_cost = 0.88 * occupants if has_elevator and floor >= 2 else 0.0
    fixed = maintenance_cost + lighting_cost + waste_cost + capital_repair_cost + elevator_cost

    costs = {
        "–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è": round(elec_cost, 2),
        "–í–æ–¥–∞": round(water_cost, 2),
        "–ö–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è": round(sewage_cost, 2),
        "–û—Ç–æ–ø–ª–µ–Ω–∏–µ": round(heat_cost, 2),
        "–§–∏–∫—Å. –ø–ª–∞—Ç–µ–∂–∏": round(fixed, 2)
    }
    costs["–ò—Ç–æ–≥–æ"] = round(sum(costs.values()), 2)
    return costs

# ----------------------------------------------------
# --- –î–ê–ù–ù–´–ï –ò –õ–û–ì–ò–ö–ê –î–õ–Ø –õ–ò–ú–ê–°–û–õ–ê (–ö–ò–ü–†) ---
# ----------------------------------------------------
LIMASSOL_CATEGORIES = ["–ê—Ä–µ–Ω–¥–∞", "–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è", "–í–æ–¥–∞", "–ò–Ω—Ç–µ—Ä–Ω–µ—Ç", "–¢–µ–ª–µ—Ñ–æ–Ω", "IPTV", "–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ"]

LIMASSOL_TARIFFS = {
    "rent": 4600,
    "electricity_history": {
        1: 0.242, 2: 0.242, 3: 0.242, 4: 0.242, 5: 0.2705, 6: 0.2705,
        7: 0.2661, 8: 0.2661, 9: 0.2661, 10: 0.2661, 11: 0.2661, 12: 0.2661
    },
    "vat_electricity": 0.19,
    "water_base": 22,
    "water_tiers": {
        40: 0.9,
        80: 1.43,
        120: 2.45,
        float('inf'): 5.0
    },
    "vat_water": 0.05,
    "internet": 20,
    "phone": 20,
    "iptv": 10,
    "vat_services": 0.19,
    "service_min": 45,
    "service_max": 125,
}

def calculate_water_cost_limassol(volume_m3):
    tariffs = LIMASSOL_TARIFFS
    cost = tariffs["water_base"]
    remaining_volume = volume_m3
    tier_limits = sorted(tariffs["water_tiers"].keys())
    last_limit = 0
    
    for limit in tier_limits:
        if remaining_volume > 0:
            vol_in_tier = min(remaining_volume, limit - last_limit)
            cost += vol_in_tier * tariffs["water_tiers"][limit]
            remaining_volume -= vol_in_tier
            last_limit = limit
        else:
            break
            
    return cost * (1 + tariffs["vat_water"])

def calculate_costs_limassol(volumes, month):
    tariffs = LIMASSOL_TARIFFS
    elec_tariff = tariffs["electricity_history"].get(month, 0.2661)
    elec_cost = volumes["–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è"] * elec_tariff * (1 + tariffs["vat_electricity"])
    water_cost = calculate_water_cost_limassol(volumes["–í–æ–¥–∞"])
    internet_cost = tariffs["internet"] * (1 + tariffs["vat_services"])
    phone_cost = tariffs["phone"] * (1 + tariffs["vat_services"])
    iptv_cost = tariffs["iptv"] * (1 + tariffs["vat_services"])
    service_cost = ((tariffs["service_min"] + tariffs["service_max"]) / 2) * (1 + tariffs["vat_services"])
    
    costs = {
        "–ê—Ä–µ–Ω–¥–∞": tariffs["rent"],
        "–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è": round(elec_cost, 2),
        "–í–æ–¥–∞": round(water_cost, 2),
        "–ò–Ω—Ç–µ—Ä–Ω–µ—Ç": round(internet_cost, 2),
        "–¢–µ–ª–µ—Ñ–æ–Ω": round(phone_cost, 2),
        "IPTV": round(iptv_cost, 2),
        "–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ": round(service_cost, 2)
    }
    costs["–ò—Ç–æ–≥–æ"] = round(sum(costs.values()), 2)
    return costs

# ------------------------
# Sidebar: –æ–±—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
# ------------------------
st.sidebar.header("üìç –í—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
selected_city = st.sidebar.selectbox("–ì–æ—Ä–æ–¥", ["–ú–∏–Ω—Å–∫", "–õ–∏–º–∞—Å–æ–ª"])
month = st.sidebar.selectbox("–ú–µ—Å—è—Ü", list(range(1, 13)), format_func=lambda x: MONTH_NAMES[x - 1])

# ------------------------
# –ì–õ–ê–í–ù–û–ï –û–ö–ù–û
# ------------------------
if selected_city == "–ú–∏–Ω—Å–∫":
    st.title("üè† –ö–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏: –ú–∏–Ω—Å–∫")
    
    st.sidebar.header("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–µ–º—å–∏ (–ú–∏–Ω—Å–∫)")
    area_m2 = st.sidebar.number_input("–ü–ª–æ—â–∞–¥—å, –º¬≤", 10.0, 500.0, 90.0)
    adults = st.sidebar.number_input("–í–∑—Ä–æ—Å–ª—ã–µ", 0, 10, 2)
    children = st.sidebar.number_input("–î–µ—Ç–∏", 0, 10, 2)
    occupants = adults + children
    
    scenario = st.sidebar.selectbox("–°—Ü–µ–Ω–∞—Ä–∏–π –ø–æ–≤–µ–¥–µ–Ω–∏—è", list(SCENARIOS.keys()), index=1)
    behavior_factor = SCENARIOS[scenario]
    house_category = st.sidebar.selectbox("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ–º–∞", list(HOUSE_COEFS.keys()), index=1)
    st.sidebar.markdown("---")
    use_subsidy = st.sidebar.checkbox("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª—å–≥–æ—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ")
    subsidy_rate = st.sidebar.slider("–î–æ–ª—è –æ—Ç –ø–æ–ª–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞", 0.0, 1.0, 0.2, 0.05) if use_subsidy else 1.0

    st.header("üìä –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ —Ä–µ–∞–ª—å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ –º–µ—Å—è—Ü (BYN)")
    with st.expander("–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—è –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞"):
        user_real = {cat: st.number_input(f"{cat} BYN", min_value=0.0, value=0.0, step=1.0, format="%.2f") for cat in MINSK_CATEGORIES}
    user_real["–ò—Ç–æ–≥–æ"] = sum(user_real.values())

    ideal_vol = calculate_volumes_minsk(area_m2, occupants, 1.0, month=month)
    ideal_costs = calculate_costs_minsk(ideal_vol, MINSK_TARIFFS, area_m2, occupants)
    neighbor_vol = calculate_volumes_minsk(area_m2, occupants, behavior_factor, month=month)
    neighbor_costs_minsk = calculate_costs_minsk(neighbor_vol, MINSK_TARIFFS, area_m2, occupants)
    neighbor_costs = {k: v * REALISM_UPLIFT for k, v in neighbor_costs_minsk.items()}
    neighbor_costs["–ò—Ç–æ–≥–æ"] = sum(neighbor_costs.values())

    st.header("üè† –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–æ–≤ (–ú–∏–Ω—Å–∫)")
    col1, col2 = st.columns([2, 1])
    with col1:
        st.metric("–ò–¥–µ–∞–ª—å–Ω—ã–π —Ä–∞—Å—á—ë—Ç –ø–æ –Ω–æ—Ä–º–∞—Ç–∏–≤–∞–º, BYN", f"{ideal_costs['–ò—Ç–æ–≥–æ']:.2f}")
        st.metric("–í–∞—à–∏ —Ä–µ–∞–ª—å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã, BYN", f"{user_real['–ò—Ç–æ–≥–æ']:.2f}")
        st.metric("–°—Ä–µ–¥–Ω–∏–π —Å–æ—Å–µ–¥, BYN", f"{neighbor_costs['–ò—Ç–æ–≥–æ']:.2f}")
        ideal_total = ideal_costs.get("–ò—Ç–æ–≥–æ", 0.0) or 0.0
        neighbor_total = neighbor_costs.get("–ò—Ç–æ–≥–æ", 0.0) or 0.0
        real_total = user_real["–ò—Ç–æ–≥–æ"]
        diff_real = round((real_total/ideal_total-1)*100,1) if ideal_total > 0 else 0.0
        diff_neighbor = round((real_total/neighbor_total-1)*100,1) if neighbor_total > 0 else 0.0
        st.info(f"–í–∞—à–∏ —Ä–µ–∞–ª—å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ {diff_real}% {'–≤—ã—à–µ' if diff_real>0 else '–Ω–∏–∂–µ'} –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞—Å—á—ë—Ç–∞.")
        st.info(f"–í–∞—à–∏ —Ä–µ–∞–ª—å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ {diff_neighbor}% {'–≤—ã—à–µ' if diff_neighbor>0 else '–Ω–∏–∂–µ'} —Å—Ä–µ–¥–Ω–µ–≥–æ —Å–æ—Å–µ–¥–∞.")
    with col2:
        detail_df = pd.DataFrame({
            "–ö–∞—Ç–µ–≥–æ—Ä–∏—è": MINSK_CATEGORIES,
            "–ò–¥–µ–∞–ª—å–Ω—ã–π —Ä–∞—Å—á—ë—Ç (BYN)": [ideal_costs[c] for c in MINSK_CATEGORIES],
            "–í–∞—à–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (BYN)": [user_real[c] for c in MINSK_CATEGORIES],
            "–°—Ä–µ–¥–Ω–∏–π —Å–æ—Å–µ–¥ (BYN)": [neighbor_costs[c] for c in MINSK_CATEGORIES],
        })
        
        # --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–î–ï–°–¨ ---
        # –£–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è —á–∏—Å–ª–æ–≤—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
        numeric_cols = ["–ò–¥–µ–∞–ª—å–Ω—ã–π —Ä–∞—Å—á—ë—Ç (BYN)", "–í–∞—à–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (BYN)", "–°—Ä–µ–¥–Ω–∏–π —Å–æ—Å–µ–¥ (BYN)"]
        formatter = {col: "{:.2f}" for col in numeric_cols}
        styled_df = detail_df.style.format(formatter).background_gradient(subset=numeric_cols, cmap="BuPu")
        st.dataframe(styled_df, height=280)

    plot_df = pd.DataFrame({
        "–ö–∞—Ç–µ–≥–æ—Ä–∏—è": MINSK_CATEGORIES * 3,
        "–¢–∏–ø": (["–ò–¥–µ–∞–ª—å–Ω—ã–π —Ä–∞—Å—á—ë—Ç"] * len(MINSK_CATEGORIES)) + (["–í–∞—à–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"] * len(MINSK_CATEGORIES)) + (["–°—Ä–µ–¥–Ω–∏–π —Å–æ—Å–µ–¥"] * len(MINSK_CATEGORIES)),
        "BYN": [ideal_costs[c] for c in MINSK_CATEGORIES] + [user_real[c] for c in MINSK_CATEGORIES] + [neighbor_costs[c] for c in MINSK_CATEGORIES]
    })
    fig = px.bar(plot_df, x="–ö–∞—Ç–µ–≥–æ—Ä–∏—è", y="BYN", color="–¢–∏–ø", barmode="group", text="BYN")
    fig.update_traces(texttemplate='%{text:.2f}', textposition='outside')
    st.plotly_chart(fig, use_container_width=True)

elif selected_city == "–õ–∏–º–∞—Å–æ–ª":
    st.title("üè† –ö–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏: –õ–∏–º–∞—Å–æ–ª")
    
    st.header("üìä –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –∏ —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ –º–µ—Å—è—Ü")
    col1, col2 = st.columns(2)
    with col1:
        st.subheader("–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤")
        user_consumption = {
            "–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è": st.number_input("–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è, –∫–í—Ç¬∑—á", min_value=0.0, value=1048.0, step=10.0),
            "–í–æ–¥–∞": st.number_input("–í–æ–¥–∞, –º¬≥", min_value=0.0, value=25.2, step=1.0),
        }
    with col2:
        st.subheader("–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–∞—Å—Ö–æ–¥—ã (‚Ç¨)")
        user_real_costs = {
            "–ê—Ä–µ–Ω–¥–∞": st.number_input("–ê—Ä–µ–Ω–¥–∞ ‚Ç¨", min_value=0.0, value=4600.0, step=50.0),
            "–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è": st.number_input("–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è ‚Ç¨", min_value=0.0, value=301.81, step=5.0),
            "–í–æ–¥–∞": st.number_input("–í–æ–¥–∞ ‚Ç¨", min_value=0.0, value=46.91, step=1.0),
            "–ò–Ω—Ç–µ—Ä–Ω–µ—Ç": st.number_input("–ò–Ω—Ç–µ—Ä–Ω–µ—Ç ‚Ç¨", min_value=0.0, value=23.8, step=1.0),
            "–¢–µ–ª–µ—Ñ–æ–Ω": st.number_input("–¢–µ–ª–µ—Ñ–æ–Ω ‚Ç¨", min_value=0.0, value=23.8, step=1.0),
            "IPTV": st.number_input("IPTV ‚Ç¨", min_value=0.0, value=11.9, step=1.0),
            "–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ": st.number_input("–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ ‚Ç¨", min_value=0.0, value=107.1, step=5.0),
        }
    user_real_costs["–ò—Ç–æ–≥–æ"] = sum(user_real_costs.values())

    calculated_costs = calculate_costs_limassol(user_consumption, month)

    st.header("üè† –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–Ω—ã—Ö –∏ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤ (‚Ç¨)")
    col1, col2 = st.columns(2)
    with col1:
        st.metric("–†–∞—Å—á–µ—Ç–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ —Ç–∞—Ä–∏—Ñ–∞–º", f"‚Ç¨ {calculated_costs['–ò—Ç–æ–≥–æ']:.2f}")
    with col2:
        st.metric("–í–∞—à–∏ —Ä–µ–∞–ª—å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã", f"‚Ç¨ {user_real_costs['–ò—Ç–æ–≥–æ']:.2f}")
    
    diff = user_real_costs['–ò—Ç–æ–≥–æ'] - calculated_costs['–ò—Ç–æ–≥–æ']
    st.info(f"–†–∞–∑–Ω–∏—Ü–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç: ‚Ç¨ {diff:.2f}")

    df_limassol = pd.DataFrame({
        "–ö–∞—Ç–µ–≥–æ—Ä–∏—è": LIMASSOL_CATEGORIES,
        "–†–∞—Å—á–µ—Ç –ø–æ —Ç–∞—Ä–∏—Ñ–∞–º (‚Ç¨)": [calculated_costs[cat] for cat in LIMASSOL_CATEGORIES],
        "–í–∞—à–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (‚Ç¨)": [user_real_costs[cat] for cat in LIMASSOL_CATEGORIES]
    })

    st.subheader("–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤")
    # --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–î–ï–°–¨ ---
    # –£–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è —á–∏—Å–ª–æ–≤—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
    numeric_cols_limassol = ["–†–∞—Å—á–µ—Ç –ø–æ —Ç–∞—Ä–∏—Ñ–∞–º (‚Ç¨)", "–í–∞—à–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (‚Ç¨)"]
    formatter_limassol = {col: "{:.2f}" for col in numeric_cols_limassol}
    styled_df = df_limassol.style.format(formatter_limassol).background_gradient(subset=numeric_cols_limassol, cmap="Greens")
    st.dataframe(styled_df, use_container_width=True)

    plot_df_limassol = pd.DataFrame({
        "–ö–∞—Ç–µ–≥–æ—Ä–∏—è": LIMASSOL_CATEGORIES * 2,
        "–¢–∏–ø": ["–†–∞—Å—á–µ—Ç –ø–æ —Ç–∞—Ä–∏—Ñ–∞–º"] * len(LIMASSOL_CATEGORIES) + ["–í–∞—à–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"] * len(LIMASSOL_CATEGORIES),
        "‚Ç¨": [calculated_costs[cat] for cat in LIMASSOL_CATEGORIES] + [user_real_costs[cat] for cat in LIMASSOL_CATEGORIES]
    })
    
    fig_limassol = px.bar(plot_df_limassol, x="–ö–∞—Ç–µ–≥–æ—Ä–∏—è", y="‚Ç¨", color="–¢–∏–ø", barmode="group", text="‚Ç¨")
    fig_limassol.update_traces(texttemplate='%{text:.2f}', textposition='outside')
    fig_limassol.update_layout(yaxis_title="–°—É–º–º–∞, ‚Ç¨", legend_title_text="–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å")
    st.plotly_chart(fig_limassol, use_container_width=True)
