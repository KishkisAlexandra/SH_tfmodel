# app.py
import streamlit as st
import pandas as pd
import plotly.express as px

st.set_page_config(page_title="Utility Benchmark ‚Äî –¥–∞—à–±–æ—Ä–¥", page_icon="üè†", layout="wide")

# ------------------------
# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ —Ç–∞—Ä–∏—Ñ—ã
# ------------------------
SCENARIOS = {"–≠–∫–æ–Ω–æ–º–Ω—ã–π": 0.85, "–°—Ä–µ–¥–Ω–∏–π": 1.0, "–†–∞—Å—Ç–æ—á–∏—Ç–µ–ª—å–Ω—ã–π": 1.25}

DEFAULT_COEFFS = {
    "elec_base_kWh": 60.0,          
    "elec_per_person_kWh": 75.0,    
    "elec_per_m2_kWh": 0.5,         
    "water_per_person_m3": 4.5,     
    "hot_water_fraction": 0.6,      
    "heating_Gcal_per_m2_season_mid": 0.15, 
    "heating_season_months": 7.0
}

HOUSE_COEFS = {
    "–ù–æ–≤—ã–π": {"heating": 1.0, "electricity": 1.0},
    "–°—Ä–µ–¥–Ω–∏–π": {"heating": 1.05, "electricity": 1.05},
    "–°—Ç–∞—Ä—ã–π": {"heating": 1.1, "electricity": 1.05},
}
REALISM_UPLIFT = 1.07
HEATING_MONTHS = [1,2,3,4,10,11,12]

# –ú–∏–Ω—Å–∫ —Ç–∞—Ä–∏—Ñ—ã
ELECTRICITY_FULL = 0.2969
ELECTRICITY_SUBSIDY = 0.2412
HEATING_FULL = 134.94
HEATING_SUBSIDY = 24.7187
WATER_TARIFF = 1.7858
SEWAGE_TARIFF = 0.9586
FIXED_FEES = 5.0

# ------------------------
# Sidebar
# ------------------------
st.sidebar.header("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–µ–º—å–∏")
city = st.sidebar.selectbox("–ì–æ—Ä–æ–¥", ["–ú–∏–Ω—Å–∫", "–õ–∏–º–∞—Å–æ–ª"])
month = st.sidebar.selectbox("–ú–µ—Å—è—Ü", list(range(1,13)),
                             format_func=lambda x: ["–Ø–Ω–≤","–§–µ–≤","–ú–∞—Ä","–ê–ø—Ä","–ú–∞–π","–ò—é–Ω","–ò—é–ª","–ê–≤–≥","–°–µ–Ω","–û–∫—Ç","–ù–æ—è","–î–µ–∫"][x-1])
area_m2 = st.sidebar.number_input("–ü–ª–æ—â–∞–¥—å, –º¬≤", 10.0, 500.0, 90.0)
adults = st.sidebar.number_input("–í–∑—Ä–æ—Å–ª—ã–µ", 0,10,2)
children = st.sidebar.number_input("–î–µ—Ç–∏", 0,10,2)
occupants = adults + children

scenario = st.sidebar.selectbox("–°—Ü–µ–Ω–∞—Ä–∏–π –ø–æ–≤–µ–¥–µ–Ω–∏—è", list(SCENARIOS.keys()), index=1)
behavior_factor = SCENARIOS[scenario]
house_category = st.sidebar.selectbox("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ–º–∞", list(HOUSE_COEFS.keys()), index=1)

st.sidebar.markdown("---")
use_subsidy = st.sidebar.checkbox("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª—å–≥–æ—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∫ —Å—É–±—Å–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É)")
subsidy_rate = st.sidebar.slider("–î–æ–ª—è –æ—Ç –ø–æ–ª–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞", 0.0, 1.0, 0.2, 0.05) if use_subsidy else 1.0

# ------------------------
# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
# ------------------------
if city == "–ú–∏–Ω—Å–∫":
    CATEGORIES = ["–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è", "–í–æ–¥–∞", "–ö–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è", "–û—Ç–æ–ø–ª–µ–Ω–∏–µ", "–§–∏–∫—Å. –ø–ª–∞—Ç–µ–∂–∏"]
elif city == "–õ–∏–º–∞—Å–æ–ª":
    CATEGORIES = ["–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è", "–í–æ–¥–∞", "–ò–Ω—Ç–µ—Ä–Ω–µ—Ç", "–¢–µ–ª–µ—Ñ–æ–Ω", "IPTV", "–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ", "–ê—Ä–µ–Ω–¥–∞"]

# ------------------------
# –§—É–Ω–∫—Ü–∏–∏ —Ä–∞—Å—á—ë—Ç–∞ –ú–∏–Ω—Å–∫
# ------------------------
def calculate_volumes(area_m2, occupants, behavior_factor, coeffs=DEFAULT_COEFFS, month=1):
    elec = (coeffs["elec_base_kWh"] + coeffs["elec_per_person_kWh"]*occupants +
            coeffs["elec_per_m2_kWh"]*area_m2) * behavior_factor
    water = coeffs["water_per_person_m3"]*occupants*behavior_factor
    hot_water = water * coeffs["hot_water_fraction"]
    sewage = water
    if month in HEATING_MONTHS:
        G_mid = coeffs["heating_Gcal_per_m2_season_mid"] * area_m2
        heat_monthly = G_mid / coeffs["heating_season_months"]
    else:
        heat_monthly = 0.0
    return {
        "–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è": round(elec,1),
        "–í–æ–¥–∞": round(water,2),
        "–ì–æ—Ä—è—á–∞—è –≤–æ–¥–∞": round(hot_water,2),
        "–ö–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è": round(sewage,2),
        "–û—Ç–æ–ø–ª–µ–Ω–∏–µ": round(heat_monthly,3)
    }

def calculate_costs_from_volumes(volumes, tariffs, area_m2=50, occupants=1, floor=1, has_elevator=True):
    elec_cost = volumes["–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è"] * tariffs["electricity_BYN_per_kWh"]
    water_cost = volumes["–í–æ–¥–∞"] * tariffs["water_BYN_per_m3"]
    sewage_cost = volumes["–ö–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è"] * tariffs["sewage_BYN_per_m3"]
    heat_cost = volumes["–û—Ç–æ–ø–ª–µ–Ω–∏–µ"] * tariffs["heating_BYN_per_Gcal"]

    maintenance_max = 0.0388
    lighting_max = 0.0249
    waste_norm = 0.2092
    elevator_max = 0.88
    capital_repair_rate = 0.05

    maintenance_cost = area_m2 * maintenance_max
    lighting_cost = area_m2 * lighting_max
    waste_cost = waste_norm * occupants
    capital_repair_cost = area_m2 * capital_repair_rate
    elevator_cost = elevator_max * occupants if has_elevator and floor >= 2 else 0.0
    fixed = maintenance_cost + lighting_cost + waste_cost + capital_repair_cost + elevator_cost

    costs = {
        "–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è": round(elec_cost,2),
        "–í–æ–¥–∞": round(water_cost,2),
        "–ö–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è": round(sewage_cost,2),
        "–û—Ç–æ–ø–ª–µ–Ω–∏–µ": round(heat_cost,2),
        "–§–∏–∫—Å. –ø–ª–∞—Ç–µ–∂–∏": round(fixed,2)
    }
    costs["–ò—Ç–æ–≥–æ"] = round(sum(costs.values()),2)
    return costs

def apply_neighbor_adjustment(volumes, tariffs, house_category, area_m2, occupants, floor=1, has_elevator=True):
    coefs = HOUSE_COEFS.get(house_category, {"heating":1.0,"electricity":1.0})
    vol_adj = volumes.copy()
    vol_adj["–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è"] *= coefs["electricity"]
    vol_adj["–û—Ç–æ–ø–ª–µ–Ω–∏–µ"] *= coefs["heating"]
    neighbor_costs = calculate_costs_from_volumes(vol_adj, tariffs, area_m2, occupants, floor, has_elevator)
    return {k: round(v * REALISM_UPLIFT, 2) for k, v in neighbor_costs.items()}

# ------------------------
# ------------------------
# –§—É–Ω–∫—Ü–∏–∏ —Ä–∞—Å—á—ë—Ç–∞ –õ–∏–º–∞—Å–æ–ª (EUR)
# ------------------------
if city == "–õ–∏–º–∞—Å–æ–ª":
    VAT_WATER = 0.05
    VAT_ELEC = 0.19
    INTERNET_TARIFF = 20
    PHONE_TARIFF = 20
    IPTV_TARIFF = 10
    VAT_FIXED = 0.19
    SERVICE_MIN = 45
    SERVICE_MAX = 125
    RENT = 4600  # —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—É–º–º–∞ –≤ EUR, —Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è

    def calculate_water_limassol(consumption_m3):
        cost = 22  # –±–∞–∑–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂
        remaining = consumption_m3
        brackets = [(1,40,0.9),(41,80,1.43),(81,120,2.45),(121,float('inf'),5.0)]
        for lower, upper, rate in brackets:
            if remaining <= 0:
                break
            apply_m3 = min(upper-lower+1, remaining)
            cost += apply_m3 * rate
            remaining -= apply_m3
        return round(cost*(1+VAT_WATER),2)

    def calculate_fixed_limassol():
        return {
            "–ò–Ω—Ç–µ—Ä–Ω–µ—Ç": round(INTERNET_TARIFF*(1+VAT_FIXED),2),
            "–¢–µ–ª–µ—Ñ–æ–Ω": round(PHONE_TARIFF*(1+VAT_FIXED),2),
            "IPTV": round(IPTV_TARIFF*(1+VAT_FIXED),2)
        }

    def calculate_service_limassol():
        avg_service = (SERVICE_MIN + SERVICE_MAX)/2
        return round(avg_service*(1+VAT_FIXED),2)

    def calculate_costs_limassol(volumes):
        elec_cost = volumes["–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è"] * 0.2661 * (1+VAT_ELEC)
        water_cost = calculate_water_limassol(volumes["–í–æ–¥–∞"])
        fixed_costs = calculate_fixed_limassol()
        service_cost = calculate_service_limassol()
        costs = {
            "–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è": round(elec_cost,2),
            "–í–æ–¥–∞": water_cost,
            **fixed_costs,
            "–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ": service_cost,
            # "–ê—Ä–µ–Ω–¥–∞" –∏—Å–∫–ª—é—á–µ–Ω–∞ –∏–∑ —Ä–∞—Å—á—ë—Ç–∞
        }
        costs["–ò—Ç–æ–≥–æ"] = round(sum(costs.values()),2)
        return costs



# –í–∞–ª—é—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
currency_label = "BYN" if city == "–ú–∏–Ω—Å–∫" else "‚Ç¨"

# ------------------------
# –í–≤–æ–¥ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤
# ------------------------
st.header(f"üìä –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ —Ä–µ–∞–ª—å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ –º–µ—Å—è—Ü ({currency_label})")
with st.expander("–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—è –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞"):
    user_real = {
        "–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è": st.number_input(f"–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è {currency_label}", min_value=0.0, value=0.0, step=1.0, format="%.2f"),
        "–í–æ–¥–∞": st.number_input(f"–í–æ–¥–∞ {currency_label}", min_value=0.0, value=0.0, step=0.1, format="%.2f")
    }
    if city == "–õ–∏–º–∞—Å–æ–ª":
        # –õ–∏–º–∞—Å–æ–ª: —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        user_real.update({
            "–ò–Ω—Ç–µ—Ä–Ω–µ—Ç": st.number_input(f"–ò–Ω—Ç–µ—Ä–Ω–µ—Ç {currency_label}", min_value=0.0, value=0.0, step=0.1, format="%.2f"),
            "–¢–µ–ª–µ—Ñ–æ–Ω": st.number_input(f"–¢–µ–ª–µ—Ñ–æ–Ω {currency_label}", min_value=0.0, value=0.0, step=0.1, format="%.2f"),
            "IPTV": st.number_input(f"IPTV {currency_label}", min_value=0.0, value=0.0, step=0.1, format="%.2f"),
            "–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ": st.number_input(f"–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ {currency_label}", min_value=0.0, value=0.0, step=0.1, format="%.2f"),
            "–ê—Ä–µ–Ω–¥–∞": st.number_input(f"–ê—Ä–µ–Ω–¥–∞ {currency_label}", min_value=0.0, value=0.0, step=0.1, format="%.2f")
        })
    else:
        # –ú–∏–Ω—Å–∫: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        user_real.update({
            "–ö–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è": st.number_input(f"–ö–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è {currency_label}", min_value=0.0, value=0.0, step=0.1, format="%.2f"),
            "–û—Ç–æ–ø–ª–µ–Ω–∏–µ": st.number_input(f"–û—Ç–æ–ø–ª–µ–Ω–∏–µ {currency_label}", min_value=0.0, value=0.0, step=0.1, format="%.2f"),
            "–§–∏–∫—Å. –ø–ª–∞—Ç–µ–∂–∏": st.number_input(f"–§–∏–∫—Å. –ø–ª–∞—Ç–µ–∂–∏ {currency_label}", min_value=0.0, value=0.0, step=0.1, format="%.2f")
        })

user_real["–ò—Ç–æ–≥–æ"] = round(sum(user_real[k] for k in (CATEGORIES if city=="–õ–∏–º–∞—Å–æ–ª" else ["–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è","–í–æ–¥–∞","–ö–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è","–û—Ç–æ–ø–ª–µ–Ω–∏–µ","–§–∏–∫—Å. –ø–ª–∞—Ç–µ–∂–∏"])), 2)

# ------------------------
# –ú–µ—Ç—Ä–∏–∫–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
# ------------------------
st.header(f"üè† –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–æ–≤ ({currency_label})")
col1, col2 = st.columns([2,1])

with col1:
    st.metric(f"–ò–¥–µ–∞–ª—å–Ω—ã–π —Ä–∞—Å—á—ë—Ç –ø–æ –Ω–æ—Ä–º–∞—Ç–∏–≤–∞–º, {currency_label}", f"{ideal_costs['–ò—Ç–æ–≥–æ']:.2f}")
    st.metric(f"–í–∞—à–∏ —Ä–µ–∞–ª—å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã, {currency_label}", f"{user_real['–ò—Ç–æ–≥–æ']:.2f}")
    st.metric(f"–°—Ä–µ–¥–Ω–∏–π —Å–æ—Å–µ–¥, {currency_label}", f"{neighbor_costs['–ò—Ç–æ–≥–æ']:.2f}")


# ------------------------
# –†–∞—Å—á—ë—Ç –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ –∏ —Å—Ä–µ–¥–Ω–µ–≥–æ —Å–æ—Å–µ–¥–∞
# ------------------------
ideal_vol = calculate_volumes(area_m2, occupants, 1.0, month=month)
neighbor_vol = calculate_volumes(area_m2, occupants, behavior_factor, month=month)

if city == "–ú–∏–Ω—Å–∫":
    ideal_costs = calculate_costs_from_volumes(ideal_vol, {
        "electricity_BYN_per_kWh": ELECTRICITY_SUBSIDY,
        "water_BYN_per_m3": WATER_TARIFF,
        "sewage_BYN_per_m3": SEWAGE_TARIFF,
        "heating_BYN_per_Gcal": HEATING_SUBSIDY,
        "fixed_fees_BYN": FIXED_FEES
    }, area_m2, occupants)

    neighbor_tariffs = {
        "electricity_BYN_per_kWh": ELECTRICITY_SUBSIDY * subsidy_rate,
        "water_BYN_per_m3": WATER_TARIFF,
        "sewage_BYN_per_m3": SEWAGE_TARIFF,
        "heating_BYN_per_Gcal": HEATING_SUBSIDY * subsidy_rate,
        "fixed_fees_BYN": FIXED_FEES
    }
    neighbor_costs = apply_neighbor_adjustment(neighbor_vol, neighbor_tariffs, house_category, area_m2, occupants)

elif city == "–õ–∏–º–∞—Å–æ–ª":
    ideal_costs = calculate_costs_limassol(ideal_vol)
    neighbor_costs = calculate_costs_limassol(neighbor_vol)

# ------------------------
# –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã
# ------------------------
st.header("üè† –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–æ–≤")
col1, col2 = st.columns([2, 1])

with col1:
    st.metric("–ò–¥–µ–∞–ª—å–Ω—ã–π —Ä–∞—Å—á—ë—Ç –ø–æ –Ω–æ—Ä–º–∞—Ç–∏–≤–∞–º, BYN", f"{ideal_costs['–ò—Ç–æ–≥–æ']:.2f}")
    st.metric("–í–∞—à–∏ —Ä–µ–∞–ª—å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã, BYN", f"{user_real['–ò—Ç–æ–≥–æ']:.2f}")
    st.metric("–°—Ä–µ–¥–Ω–∏–π —Å–æ—Å–µ–¥, BYN", f"{neighbor_costs['–ò—Ç–æ–≥–æ']:.2f}")

    ideal_total = ideal_costs.get("–ò—Ç–æ–≥–æ", 0.0)
    neighbor_total = neighbor_costs.get("–ò—Ç–æ–≥–æ", 0.0)
    real_total = user_real["–ò—Ç–æ–≥–æ"]

    diff_real = round((real_total/ideal_total-1)*100,1) if ideal_total>0 else 0.0
    diff_neighbor = round((real_total/neighbor_total-1)*100,1) if neighbor_total>0 else 0.0

    st.info(f"–í–∞—à–∏ —Ä–µ–∞–ª—å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ {diff_real}% {'–≤—ã—à–µ' if diff_real>0 else '–Ω–∏–∂–µ'} –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞—Å—á—ë—Ç–∞.")
    st.info(f"–í–∞—à–∏ —Ä–µ–∞–ª—å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ {diff_neighbor}% {'–≤—ã—à–µ' if diff_neighbor>0 else '–Ω–∏–∂–µ'} —Å—Ä–µ–¥–Ω–µ–≥–æ —Å–æ—Å–µ–¥–∞.")

with col2:
    detail_df = pd.DataFrame({
        "–ö–∞—Ç–µ–≥–æ—Ä–∏—è": CATEGORIES,
        "–ò–¥–µ–∞–ª—å–Ω—ã–π —Ä–∞—Å—á—ë—Ç (BYN)": [ideal_costs.get(c,0) for c in CATEGORIES],
        "–í–∞—à–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (BYN)": [user_real.get(c,0) for c in CATEGORIES],
        "–°—Ä–µ–¥–Ω–∏–π —Å–æ—Å–µ–¥ (BYN)": [neighbor_costs.get(c,0) for c in CATEGORIES],
    })

    styled_df = detail_df.style.format({
        "–ò–¥–µ–∞–ª—å–Ω—ã–π —Ä–∞—Å—á—ë—Ç (BYN)": "{:.2f}",
        "–í–∞—à–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (BYN)": "{:.2f}",
        "–°—Ä–µ–¥–Ω–∏–π —Å–æ—Å–µ–¥ (BYN)": "{:.2f}"
    }).background_gradient(
        subset=["–ò–¥–µ–∞–ª—å–Ω—ã–π —Ä–∞—Å—á—ë—Ç (BYN)", "–í–∞—à–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (BYN)", "–°—Ä–µ–¥–Ω–∏–π —Å–æ—Å–µ–¥ (BYN)"],
        cmap="BuPu"
    ).set_properties(**{
        'text-align': 'center',
        'font-size': '14px'
    }).set_table_styles([
        {'selector': 'th', 'props': [('text-align', 'center'), ('font-size', '15px'), ('background-color', '#f0f0f0')]}
    ])
    st.dataframe(styled_df, height=280)

# ------------------------
# –ì—Ä–∞—Ñ–∏–∫ —Ä–∞—Å—Ö–æ–¥–æ–≤
# ------------------------
plot_df = pd.DataFrame({
    "–ö–∞—Ç–µ–≥–æ—Ä–∏—è": CATEGORIES * 3,
    "–¢–∏–ø": (["–ò–¥–µ–∞–ª—å–Ω—ã–π —Ä–∞—Å—á—ë—Ç"] * len(CATEGORIES)) + (["–í–∞—à–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"] * len(CATEGORIES)) + (["–°—Ä–µ–¥–Ω–∏–π —Å–æ—Å–µ–¥"] * len(CATEGORIES)),
    "BYN": [ideal_costs.get(c,0) for c in CATEGORIES] + [user_real.get(c,0) for c in CATEGORIES] + [neighbor_costs.get(c,0) for c in CATEGORIES]
})
fig = px.bar(plot_df, x="–ö–∞—Ç–µ–≥–æ—Ä–∏—è", y="BYN", color="–¢–∏–ø", barmode="group",
             color_discrete_map={"–ò–¥–µ–∞–ª—å–Ω—ã–π —Ä–∞—Å—á—ë—Ç":"#636EFA","–í–∞—à–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ":"#00CC96","–°—Ä–µ–¥–Ω–∏–π —Å–æ—Å–µ–¥":"#EF553B"},
             text="BYN")
fig.update_traces(texttemplate='%{text:.2f}', textposition='outside')
fig.update_layout(yaxis_title="BYN / –º–µ—Å—è—Ü", legend_title_text="–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å", uniformtext_minsize=8)
st.plotly_chart(fig, use_container_width=True)
