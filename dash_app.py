# app.py
import streamlit as st
import pandas as pd
import plotly.express as px

st.set_page_config(page_title="Utility Benchmark ‚Äî –¥–∞—à–±–æ—Ä–¥", page_icon="üè†", layout="wide")

# ------------------------
# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
# ------------------------
SCENARIOS = {"–≠–∫–æ–Ω–æ–º–Ω—ã–π": 0.85, "–°—Ä–µ–¥–Ω–∏–π": 1.0, "–†–∞—Å—Ç–æ—á–∏—Ç–µ–ª—å–Ω—ã–π": 1.25}

DEFAULT_COEFFS = {
    "elec_base_kWh": 60.0,
    "elec_per_person_kWh": 75.0,
    "elec_per_m2_kWh": 0.5,
    "water_per_person_m3": 4.5,
    "hot_water_fraction": 0.6,
    "heating_Gcal_per_m2_season_mid": 0.15,
    "heating_season_months": 7.0
}

HOUSE_COEFS = {
    "–ù–æ–≤—ã–π": {"heating": 1.0, "electricity": 1.0},
    "–°—Ä–µ–¥–Ω–∏–π": {"heating": 1.05, "electricity": 1.05},
    "–°—Ç–∞—Ä—ã–π": {"heating": 1.1, "electricity": 1.05},
}
REALISM_UPLIFT = 1.07
HEATING_MONTHS = [1,2,3,4,10,11,12]

# –ú–∏–Ω—Å–∫ —Ç–∞—Ä–∏—Ñ—ã
ELECTRICITY_FULL = 0.2969
ELECTRICITY_SUBSIDY = 0.2412
HEATING_FULL = 134.94
HEATING_SUBSIDY = 24.7187
WATER_TARIFF = 1.7858
SEWAGE_TARIFF = 0.9586
FIXED_FEES = 5.0
CATEGORIES_MINSK = ["–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è", "–í–æ–¥–∞", "–ö–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è", "–û—Ç–æ–ø–ª–µ–Ω–∏–µ", "–§–∏–∫—Å. –ø–ª–∞—Ç–µ–∂–∏"]

# –õ–∏–º–∞—Å—Å–æ–ª —Ç–∞—Ä–∏—Ñ—ã –∏ –ù–î–°
ELECTRICITY_HISTORY = {1:0.242,2:0.242,3:0.242,4:0.242,5:0.242,6:0.242,
                       7:0.242,8:0.242,9:0.242,10:0.2661,11:0.2661,12:0.2661}
WATER_VOLUME = 25.2
WATER_BASE = 22
WATER_TARIFF = 0.9
WATER_VAT = 1.05
VAT_ELECTRICITY = 1.19
VAT_OTHER = 1.19
SERVICE_MIN = 45
SERVICE_MAX = 125
CATEGORIES_LIMASSOL = ["–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è","–í–æ–¥–∞","–ò–Ω—Ç–µ—Ä–Ω–µ—Ç","–¢–µ–ª–µ—Ñ–æ–Ω","IPTV","–°–µ—Ä–≤–∏—Å–Ω—ã–π —Å–±–æ—Ä","–ò—Ç–æ–≥–æ"]

# ------------------------
# –§—É–Ω–∫—Ü–∏–∏ —Ä–∞—Å—á—ë—Ç–∞
# ------------------------
def calculate_volumes(area_m2, occupants, behavior_factor, coeffs=DEFAULT_COEFFS, month=1):
    elec = (coeffs["elec_base_kWh"] + coeffs["elec_per_person_kWh"]*occupants +
            coeffs["elec_per_m2_kWh"]*area_m2) * behavior_factor
    water = coeffs["water_per_person_m3"]*occupants*behavior_factor
    hot_water = water * coeffs["hot_water_fraction"]
    sewage = water
    if month in HEATING_MONTHS:
        G_mid = coeffs["heating_Gcal_per_m2_season_mid"] * area_m2
        heat_monthly = G_mid / coeffs["heating_season_months"]
    else:
        heat_monthly = 0.0
    return {
        "–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è": round(elec,1),
        "–í–æ–¥–∞": round(water,2),
        "–ì–æ—Ä—è—á–∞—è –≤–æ–¥–∞": round(hot_water,2),
        "–ö–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è": round(sewage,2),
        "–û—Ç–æ–ø–ª–µ–Ω–∏–µ": round(heat_monthly,3)
    }

def calculate_costs_from_volumes(volumes, tariffs, area_m2=50, occupants=1, floor=1, has_elevator=True):
    elec_cost = volumes["–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è"] * tariffs["electricity_BYN_per_kWh"]
    water_cost = volumes["–í–æ–¥–∞"] * tariffs["water_BYN_per_m3"]
    sewage_cost = volumes["–ö–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è"] * tariffs["sewage_BYN_per_m3"]
    heat_cost = volumes["–û—Ç–æ–ø–ª–µ–Ω–∏–µ"] * tariffs["heating_BYN_per_Gcal"]

    maintenance_max = 0.0388
    lighting_max = 0.0249
    waste_norm = 0.2092
    capital_repair_rate = 0.05
    elevator_max = 0.88

    maintenance_cost = area_m2 * maintenance_max
    lighting_cost = area_m2 * lighting_max
    waste_cost = waste_norm * occupants
    capital_repair_cost = area_m2 * capital_repair_rate
    elevator_cost = elevator_max * occupants if has_elevator and floor >= 2 else 0.0

    fixed = maintenance_cost + lighting_cost + waste_cost + capital_repair_cost + elevator_cost

    costs = {
        "–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è": round(elec_cost,2),
        "–í–æ–¥–∞": round(water_cost,2),
        "–ö–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è": round(sewage_cost,2),
        "–û—Ç–æ–ø–ª–µ–Ω–∏–µ": round(heat_cost,2),
        "–§–∏–∫—Å. –ø–ª–∞—Ç–µ–∂–∏": round(fixed,2)
    }
    costs["–ò—Ç–æ–≥–æ"] = round(sum(costs.values()),2)
    return costs

def apply_neighbor_adjustment(volumes, tariffs, house_category, area_m2, occupants, floor=1, has_elevator=True):
    coefs = HOUSE_COEFS.get(house_category, {"heating":1.0,"electricity":1.0})
    vol_adj = volumes.copy()
    vol_adj["–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è"] = vol_adj["–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è"] * coefs["electricity"]
    vol_adj["–û—Ç–æ–ø–ª–µ–Ω–∏–µ"] = vol_adj["–û—Ç–æ–ø–ª–µ–Ω–∏–µ"] * coefs["heating"]
    neighbor_costs = calculate_costs_from_volumes(vol_adj, tariffs, area_m2, occupants, floor, has_elevator)
    neighbor_costs = {k: round(v * REALISM_UPLIFT, 2) for k, v in neighbor_costs.items()}
    return neighbor_costs

def calculate_limassol_costs(electricity_kWh, month, use_max_other=False):
    elec_rate = ELECTRICITY_HISTORY.get(month,0.2661)
    electricity_cost = electricity_kWh * elec_rate * VAT_ELECTRICITY
    water_cost = (WATER_BASE + WATER_VOLUME*WATER_TARIFF) * WATER_VAT

    # –ü—Ä–æ—á–∏–µ —Ä–∞—Å—Ö–æ–¥—ã
    internet = 20 * VAT_OTHER
    phone = 20 * VAT_OTHER
    iptv = 10 * VAT_OTHER
    service = SERVICE_MAX if use_max_other else SERVICE_MIN

    total = electricity_cost + water_cost + internet + phone + iptv + service
    return {
        "–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è": round(electricity_cost,2),
        "–í–æ–¥–∞": round(water_cost,2),
        "–ò–Ω—Ç–µ—Ä–Ω–µ—Ç": round(internet,2),
        "–¢–µ–ª–µ—Ñ–æ–Ω": round(phone,2),
        "IPTV": round(iptv,2),
        "–°–µ—Ä–≤–∏—Å–Ω—ã–π —Å–±–æ—Ä": round(service,2),
        "–ò—Ç–æ–≥–æ": round(total,2)
    }

# ------------------------
# Sidebar: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–µ–º—å–∏ –∏ –≥–æ—Ä–æ–¥–∞
# ------------------------
st.sidebar.header("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã")
city = st.sidebar.selectbox("–ì–æ—Ä–æ–¥", ["–ú–∏–Ω—Å–∫","–õ–∏–º–∞—Å—Å–æ–ª"])
month = st.sidebar.selectbox("–ú–µ—Å—è—Ü", list(range(1,13)),
                             format_func=lambda x: ["–Ø–Ω–≤","–§–µ–≤","–ú–∞—Ä","–ê–ø—Ä","–ú–∞–π","–ò—é–Ω","–ò—é–ª","–ê–≤–≥","–°–µ–Ω","–û–∫—Ç","–ù–æ—è","–î–µ–∫"][x-1])
area_m2 = st.sidebar.number_input("–ü–ª–æ—â–∞–¥—å, –º¬≤", 10.0, 500.0, 90.0)
adults = st.sidebar.number_input("–í–∑—Ä–æ—Å–ª—ã–µ", 0,10,2)
children = st.sidebar.number_input("–î–µ—Ç–∏", 0,10,2)
occupants = adults + children

if city=="–ú–∏–Ω—Å–∫":
    scenario = st.sidebar.selectbox("–°—Ü–µ–Ω–∞—Ä–∏–π –ø–æ–≤–µ–¥–µ–Ω–∏—è", list(SCENARIOS.keys()), index=1)
    behavior_factor = SCENARIOS[scenario]
    house_category = st.sidebar.selectbox("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ–º–∞", list(HOUSE_COEFS.keys()), index=1)
    use_subsidy = st.sidebar.checkbox("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª—å–≥–æ—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∫ —Å—É–±—Å–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É)")
    subsidy_rate = st.sidebar.slider("–î–æ–ª—è –æ—Ç –ø–æ–ª–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞", 0.0, 1.0, 0.2, 0.05) if use_subsidy else 1.0
else:
    electricity_kWh = st.sidebar.number_input("–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è, –∫–í—Ç¬∑—á", 0, 5000, 1048)
    use_max_other = st.sidebar.checkbox("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –ø—Ä–æ—á–∏–µ —Ä–∞—Å—Ö–æ–¥—ã")

# ------------------------
# –í–≤–æ–¥ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤
# ------------------------
st.header("üìä –í–∞—à–∏ —Ä–µ–∞–ª—å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ –º–µ—Å—è—Ü")
if city=="–ú–∏–Ω—Å–∫":
    user_real = {
        "–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è": st.number_input("–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è BYN", 0.0, 10000.0, 0.0),
        "–í–æ–¥–∞": st.number_input("–í–æ–¥–∞ BYN", 0.0, 1000.0, 0.0),
        "–ö–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è": st.number_input("–ö–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è BYN",0.0,1000.0,0.0),
        "–û—Ç–æ–ø–ª–µ–Ω–∏–µ": st.number_input("–û—Ç–æ–ø–ª–µ–Ω–∏–µ BYN",0.0,1000.0,0.0),
        "–§–∏–∫—Å. –ø–ª–∞—Ç–µ–∂–∏": st.number_input("–§–∏–∫—Å. –ø–ª–∞—Ç–µ–∂–∏ BYN",0.0,1000.0,0.0)
    }
    user_real["–ò—Ç–æ–≥–æ"] = round(sum(user_real[k] for k in CATEGORIES_MINSK),2)
else:
    user_real = {
        "–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è": st.number_input("–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è ‚Ç¨",0.0,5000.0,0.0),
        "–í–æ–¥–∞": st.number_input("–í–æ–¥–∞ ‚Ç¨",0.0,500.0,0.0),
        "–ò–Ω—Ç–µ—Ä–Ω–µ—Ç": st.number_input("–ò–Ω—Ç–µ—Ä–Ω–µ—Ç ‚Ç¨",0.0,100.0,0.0),
        "–¢–µ–ª–µ—Ñ–æ–Ω": st.number_input("–¢–µ–ª–µ—Ñ–æ–Ω ‚Ç¨",0.0,100.0,0.0),
        "IPTV": st.number_input("IPTV ‚Ç¨",0.0,100.0,0.0),
        "–°–µ—Ä–≤–∏—Å–Ω—ã–π —Å–±–æ—Ä": st.number_input("–°–µ—Ä–≤–∏—Å–Ω—ã–π —Å–±–æ—Ä ‚Ç¨",0.0,500.0,0.0)
    }
    user_real["–ò—Ç–æ–≥–æ"] = round(sum(user_real[k] for k in CATEGORIES_LIMASSOL[:-1]),2)

# ------------------------
# –†–∞—Å—á—ë—Ç –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ –∏ —Å—Ä–µ–¥–Ω–µ–≥–æ —Å–æ—Å–µ–¥–∞
# ------------------------
if city=="–ú–∏–Ω—Å–∫":
    ideal_vol = calculate_volumes(area_m2, occupants, 1.0, month=month)
    ideal_costs = calculate_costs_from_volumes(ideal_vol,{
        "electricity_BYN_per_kWh": ELECTRICITY_SUBSIDY,
        "water_BYN_per_m3": WATER_TARIFF,
        "sewage_BYN_per_m3": SEWAGE_TARIFF,
        "heating_BYN_per_Gcal": HEATING_SUBSIDY,
        "fixed_fees_BYN": FIXED_FEES
    }, area_m2, occupants)
    
    neighbor_vol = calculate_volumes(area_m2, occupants, behavior_factor, month=month)
    neighbor_tariffs = {
        "electricity_BYN_per_kWh": ELECTRICITY_SUBSIDY * subsidy_rate,
        "water_BYN_per_m3": WATER_TARIFF,
        "sewage_BYN_per_m3
