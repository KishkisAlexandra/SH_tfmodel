{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMa6Q1m9frLM8j7KNMN7ZaI",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/KishkisAlexandra/SH_tfmodel/blob/main/app.py\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "id": "35TfDY9ucCwt"
      },
      "outputs": [],
      "source": [
        "# This cell contains shell commands."
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# app.py\n",
        "import streamlit as st\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "from io import BytesIO\n",
        "from datetime import datetime\n",
        "\n",
        "st.set_page_config(page_title=\"Utility Benchmark Demo ‚Äî Typical Households\", page_icon=\"üè†\", layout=\"wide\")\n",
        "\n",
        "# ---- Helper / model functions ----\n",
        "profiles = {\"eco\": 0.85, \"average\": 1.0, \"intensive\": 1.15}\n",
        "\n",
        "# Default tariffs (pre-filled for Minsk as agreed)\n",
        "DEFAULT_TARIFFS = {\n",
        "    \"electricity_BYN_per_kWh\": 0.254,     # BYN / kWh\n",
        "    \"water_BYN_per_m3\": 1.7858,          # BYN / m3 (cold+hot combined tariff used for simplicity)\n",
        "    \"sewage_BYN_per_m3\": 0.9586,         # BYN / m3\n",
        "    \"heating_BYN_per_Gcal\": 135.0,       # BYN / Gcal\n",
        "    \"gas_BYN_per_m3\": 0.10,              # BYN / m3 (placeholder, rarely used if central heating)\n",
        "    \"fixed_fees_BYN\": 5.0                # BYN / month (administration, trash etc.)\n",
        "}\n",
        "\n",
        "# Coefficients (tweakable)\n",
        "DEFAULT_COEFFS = {\n",
        "    \"elec_base_kWh\": 40.0,\n",
        "    \"elec_per_person_kWh\": 35.0,\n",
        "    \"elec_per_m2_kWh\": 0.25,\n",
        "    \"water_per_person_m3\": 3.5,\n",
        "    \"hot_water_fraction\": 0.45,\n",
        "    \"heating_Gcal_per_m2_season_low\": 0.08,\n",
        "    \"heating_Gcal_per_m2_season_mid\": 0.10,\n",
        "    \"heating_Gcal_per_m2_season_high\": 0.12,\n",
        "    \"heating_season_months\": 7.0\n",
        "}\n",
        "\n",
        "def calculate_volumes(area_m2: float, occupants: int, profile: str, coeffs: dict = DEFAULT_COEFFS):\n",
        "    pf = profiles.get(profile, 1.0)\n",
        "    elec = (coeffs[\"elec_base_kWh\"] + coeffs[\"elec_per_person_kWh\"] * occupants + coeffs[\"elec_per_m2_kWh\"] * area_m2) * pf\n",
        "    water = coeffs[\"water_per_person_m3\"] * occupants * pf\n",
        "    hot_water = water * coeffs[\"hot_water_fraction\"]\n",
        "    sewage = water\n",
        "    G_low = coeffs[\"heating_Gcal_per_m2_season_low\"] * area_m2\n",
        "    G_mid = coeffs[\"heating_Gcal_per_m2_season_mid\"] * area_m2\n",
        "    G_high = coeffs[\"heating_Gcal_per_m2_season_high\"] * area_m2\n",
        "    heat_monthly_low = G_low / coeffs[\"heating_season_months\"]\n",
        "    heat_monthly_mid = G_mid / coeffs[\"heating_season_months\"]\n",
        "    heat_monthly_high = G_high / coeffs[\"heating_season_months\"]\n",
        "    volumes = {\n",
        "        \"electricity_kWh\": round(elec, 1),\n",
        "        \"water_m3\": round(water, 2),\n",
        "        \"hot_water_m3\": round(hot_water, 2),\n",
        "        \"sewage_m3\": round(sewage, 2),\n",
        "        \"heating_Gcal_month_low\": round(heat_monthly_low, 3),\n",
        "        \"heating_Gcal_month_mid\": round(heat_monthly_mid, 3),\n",
        "        \"heating_Gcal_month_high\": round(heat_monthly_high, 3)\n",
        "    }\n",
        "    return volumes\n",
        "\n",
        "def calculate_costs(volumes: dict, tariffs: dict, heating_scenario=\"mid\"):\n",
        "    elec_cost = volumes[\"electricity_kWh\"] * tariffs[\"electricity_BYN_per_kWh\"]\n",
        "    water_cost = volumes[\"water_m3\"] * tariffs[\"water_BYN_per_m3\"]\n",
        "    sewage_cost = volumes[\"sewage_m3\"] * tariffs[\"sewage_BYN_per_m3\"]\n",
        "    if heating_scenario == \"low\":\n",
        "        heat_cost = volumes[\"heating_Gcal_month_low\"] * tariffs[\"heating_BYN_per_Gcal\"]\n",
        "    elif heating_scenario == \"high\":\n",
        "        heat_cost = volumes[\"heating_Gcal_month_high\"] * tariffs[\"heating_BYN_per_Gcal\"]\n",
        "    else:\n",
        "        heat_cost = volumes[\"heating_Gcal_month_mid\"] * tariffs[\"heating_BYN_per_Gcal\"]\n",
        "    gas_cost = 0.0\n",
        "    fixed = tariffs.get(\"fixed_fees_BYN\", 0.0)\n",
        "    costs = {\n",
        "        \"electricity_cost\": round(elec_cost, 2),\n",
        "        \"water_cost\": round(water_cost, 2),\n",
        "        \"sewage_cost\": round(sewage_cost, 2),\n",
        "        \"heating_cost\": round(heat_cost, 2),\n",
        "        \"gas_cost\": round(gas_cost, 2),\n",
        "        \"fixed_fees\": round(fixed, 2)\n",
        "    }\n",
        "    costs[\"total_monthly\"] = round(sum(costs.values()), 2)\n",
        "    return costs\n",
        "\n",
        "# ---- UI layout ----\n",
        "st.title(\"üè† –î–µ–º–æ: –ú–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–æ–≤—ã—Ö –¥–æ–º–æ—Ö–æ–∑—è–π—Å—Ç–≤ ‚Äî —Ä–∞—Å—á—ë—Ç –∫–æ–º–º—É–Ω–∞–ª—å–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π\")\n",
        "st.markdown(\"\"\"\n",
        "**–¶–µ–ª—å:** –±—ã—Å—Ç—Ä–æ –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞—Ç—å –æ–±—ä—ë–º—ã –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –∏ –º–µ—Å—è—á–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã –¥–ª—è —Ç–∏–ø–æ–≤—ã—Ö –¥–æ–º–æ—Ö–æ–∑—è–π—Å—Ç–≤,\n",
        "–ø–æ–∫–∞–∑—ã–≤–∞—è –¥–∏–∞–ø–∞–∑–æ–Ω (eco / average / intensive) –∏ –ø–æ–∑–≤–æ–ª—è—è –∫–∞–ª–∏–±—Ä–æ–≤–∞—Ç—å –º–æ–¥–µ–ª—å –ø–æ —Ä–µ–∞–ª—å–Ω–æ–π –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏.\n",
        "\"\"\")\n",
        "\n",
        "# Left column: inputs\n",
        "with st.sidebar:\n",
        "    st.header(\"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–∏\")\n",
        "    st.subheader(\"–ê—Ä—Ö–µ—Ç–∏–ø (–≤–≤–æ–¥)\")\n",
        "    area_m2 = st.number_input(\"–ü–ª–æ—â–∞–¥—å, –º¬≤\", min_value=10.0, max_value=1000.0, value=90.0, step=1.0)\n",
        "    adults = st.number_input(\"–í–∑—Ä–æ—Å–ª—ã–µ\", min_value=0, max_value=10, value=2, step=1)\n",
        "    children = st.number_input(\"–î–µ—Ç–∏\", min_value=0, max_value=10, value=2, step=1)\n",
        "    profile = st.selectbox(\"–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–≤–µ–¥–µ–Ω–∏—è\", options=[\"eco\", \"average\", \"intensive\"], index=1, format_func=lambda x: x.capitalize())\n",
        "    heating_type = st.selectbox(\"–¢–∏–ø –æ—Ç–æ–ø–ª–µ–Ω–∏—è (–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ)\", options=[\"central (district)\", \"gas boiler\", \"electric heating\"], index=0)\n",
        "    st.markdown(\"---\")\n",
        "    st.subheader(\"–¢–∞—Ä–∏—Ñ—ã (BYN) ‚Äî —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–µ\")\n",
        "    t_elec = st.number_input(\"–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è, BYN / kWh\", value=DEFAULT_TARIFFS[\"electricity_BYN_per_kWh\"], format=\"%.6f\")\n",
        "    t_water = st.number_input(\"–í–æ–¥–∞, BYN / m¬≥\", value=DEFAULT_TARIFFS[\"water_BYN_per_m3\"], format=\"%.6f\")\n",
        "    t_sewage = st.number_input(\"–ö–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è, BYN / m¬≥\", value=DEFAULT_TARIFFS[\"sewage_BYN_per_m3\"], format=\"%.6f\")\n",
        "    t_heat = st.number_input(\"–û—Ç–æ–ø–ª–µ–Ω–∏–µ, BYN / Gcal\", value=DEFAULT_TARIFFS[\"heating_BYN_per_Gcal\"], format=\"%.2f\")\n",
        "    t_gas = st.number_input(\"–ì–∞–∑, BYN / m¬≥ (–µ—Å–ª–∏ –∞–∫—Ç—É–∞–ª—å–Ω–æ)\", value=DEFAULT_TARIFFS[\"gas_BYN_per_m3\"], format=\"%.6f\")\n",
        "    t_fixed = st.number_input(\"–§–∏–∫—Å. –ø–ª–∞—Ç–µ–∂—ã, BYN / –º–µ—Å\", value=DEFAULT_TARIFFS[\"fixed_fees_BYN\"], format=\"%.2f\")\n",
        "    st.markdown(\"---\")\n",
        "    st.subheader(\"–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)\")\n",
        "    elec_base = st.number_input(\"Elec: –±–∞–∑–æ–≤—ã–π kWh (–∞–ø–ø–∞—Ä–∞—Ç—ã)\", value=DEFAULT_COEFFS[\"elec_base_kWh\"])\n",
        "    elec_pp = st.number_input(\"Elec: kWh –Ω–∞ —á–µ–ª–æ–≤–µ–∫–∞/–º–µ—Å\", value=DEFAULT_COEFFS[\"elec_per_person_kWh\"])\n",
        "    elec_pm2 = st.number_input(\"Elec: kWh –Ω–∞ –º¬≤/–º–µ—Å\", value=DEFAULT_COEFFS[\"elec_per_m2_kWh\"])\n",
        "    water_pp = st.number_input(\"–í–æ–¥–∞: m¬≥ –Ω–∞ —á–µ–ª–æ–≤–µ–∫–∞/–º–µ—Å\", value=DEFAULT_COEFFS[\"water_per_person_m3\"])\n",
        "    st.markdown(\"---\")\n",
        "    st.write(\"–°–ø—Ä–∞–≤–æ—á–Ω–æ: –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —Ç–∞—Ä–∏—Ñ–æ–≤ (–ú–∏–Ω—Å–∫):\")\n",
        "    st.write(\"- Energosbyt / –ú–∏–Ω—Å–∫—ç–Ω–µ—Ä–≥–æ—Å–±—ã—Ç (—ç–ª–µ–∫—Ç—Ä–æ) ‚Äî [energosbyt.by]\")\n",
        "    st.write(\"- –ú–∏–Ω—Å–∫–≤–æ–¥–æ–∫–∞–Ω–∞–ª (–≤–æ–¥–∞, –∫–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è) ‚Äî [minskvodokanal.by]\")\n",
        "    st.write(\"**–ù–∞–∂–º–∏—Ç–µ '–î–æ–±–∞–≤–∏—Ç—å –≤ –æ—Ç—á–µ—Ç'**, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–∞—Å—á—ë—Ç –≤ —Ç–∞–±–ª–∏—Ü—É —Å–ø—Ä–∞–≤–∞.\")\n",
        "\n",
        "# Build tariffs and coeffs dicts from sidebar inputs\n",
        "tariffs = {\n",
        "    \"electricity_BYN_per_kWh\": float(t_elec),\n",
        "    \"water_BYN_per_m3\": float(t_water),\n",
        "    \"sewage_BYN_per_m3\": float(t_sewage),\n",
        "    \"heating_BYN_per_Gcal\": float(t_heat),\n",
        "    \"gas_BYN_per_m3\": float(t_gas),\n",
        "    \"fixed_fees_BYN\": float(t_fixed)\n",
        "}\n",
        "coeffs = {\n",
        "    \"elec_base_kWh\": float(elec_base),\n",
        "    \"elec_per_person_kWh\": float(elec_pp),\n",
        "    \"elec_per_m2_kWh\": float(elec_pm2),\n",
        "    \"water_per_person_m3\": float(water_pp),\n",
        "    \"hot_water_fraction\": DEFAULT_COEFFS[\"hot_water_fraction\"],\n",
        "    \"heating_Gcal_per_m2_season_low\": DEFAULT_COEFFS[\"heating_Gcal_per_m2_season_low\"],\n",
        "    \"heating_Gcal_per_m2_season_mid\": DEFAULT_COEFFS[\"heating_Gcal_per_m2_season_mid\"],\n",
        "    \"heating_Gcal_per_m2_season_high\": DEFAULT_COEFFS[\"heating_Gcal_per_m2_season_high\"],\n",
        "    \"heating_season_months\": DEFAULT_COEFFS[\"heating_season_months\"]\n",
        "}\n",
        "\n",
        "# Main area: compute and show\n",
        "st.header(\"–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á—ë—Ç–∞ –¥–ª—è –∞—Ä—Ö–µ—Ç–∏–ø–∞\")\n",
        "occupants = adults + children\n",
        "volumes = calculate_volumes(area_m2, occupants, profile, coeffs)\n",
        "costs = calculate_costs(volumes, tariffs, heating_scenario=\"mid\")\n",
        "\n",
        "col1, col2 = st.columns([2, 1])\n",
        "with col1:\n",
        "    st.subheader(f\"–ê—Ä—Ö–µ—Ç–∏–ø: {area_m2} –º¬≤, {adults} –≤–∑—Ä–æ—Å–ª—ã—Ö, {children} –¥–µ—Ç–µ–π ‚Äî –ø—Ä–æ—Ñ–∏–ª—å: {profile}\")\n",
        "    st.markdown(\"**–û–±—ä—ë–º—ã (–æ—Ü–µ–Ω–∫–∞)**\")\n",
        "    vol_table = {\n",
        "        \"–ü–∞—Ä–∞–º–µ—Ç—Ä\": [\"–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ (kWh/–º–µ—Å)\", \"–í–æ–¥–∞ (m¬≥/–º–µ—Å)\", \"–ì–æ—Ä—è—á–∞—è –≤–æ–¥–∞ (m¬≥/–º–µ—Å)\", \"–ö–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è (m¬≥/–º–µ—Å)\",\n",
        "                     \"–û—Ç–æ–ø–ª–µ–Ω–∏–µ (Gcal/–º–µ—Å, mid)\"],\n",
        "        \"–ó–Ω–∞—á–µ–Ω–∏–µ\": [volumes[\"electricity_kWh\"], volumes[\"water_m3\"], volumes[\"hot_water_m3\"], volumes[\"sewage_m3\"], volumes[\"heating_Gcal_month_mid\"]]\n",
        "    }\n",
        "    st.table(pd.DataFrame(vol_table))\n",
        "\n",
        "    st.markdown(\"**–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏ (BYN / –º–µ—Å)**\")\n",
        "    cost_df = pd.DataFrame([\n",
        "        [\"–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è\", f\"{volumes['electricity_kWh']} kWh\", tariffs[\"electricity_BYN_per_kWh\"], costs[\"electricity_cost\"]],\n",
        "        [\"–í–æ–¥–∞ (—Ö–æ–ª–æ–¥+–≥–æ—Ä—è—á)\", f\"{volumes['water_m3']} m¬≥\", tariffs[\"water_BYN_per_m3\"], costs[\"water_cost\"]],\n",
        "        [\"–ö–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è\", f\"{volumes['sewage_m3']} m¬≥\", tariffs[\"sewage_BYN_per_m3\"], costs[\"sewage_cost\"]],\n",
        "        [\"–û—Ç–æ–ø–ª–µ–Ω–∏–µ (mid)\", f\"{volumes['heating_Gcal_month_mid']} Gcal\", tariffs[\"heating_BYN_per_Gcal\"], costs[\"heating_cost\"]],\n",
        "        [\"–ì–∞–∑ (–µ—Å–ª–∏ –µ—Å—Ç—å)\", \"-\", tariffs[\"gas_BYN_per_m3\"], costs[\"gas_cost\"]],\n",
        "        [\"–§–∏–∫—Å. –ø–ª–∞—Ç–µ–∂–∏\", \"-\", \"-\", costs[\"fixed_fees\"]],\n",
        "        [\"–ò—Ç–æ–≥–æ\", \"-\", \"-\", costs[\"total_monthly\"]]\n",
        "    ], columns=[\"–£—Å–ª—É–≥–∞\", \"–û–±—ä—ë–º\", \"–¢–∞—Ä–∏—Ñ (BYN)\", \"–°—Ç–æ–∏–º–æ—Å—Ç—å (BYN)\"])\n",
        "    st.dataframe(cost_df.style.format({2: \"{:.4f}\", 3: \"{:.2f}\"}), height=300)\n",
        "\n",
        "with col2:\n",
        "    st.subheader(\"–ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏\")\n",
        "    st.metric(\"–ò—Ç–æ–≥–æ (BYN/–º–µ—Å)\", f\"{costs['total_monthly']:.2f}\")\n",
        "    st.metric(\"–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è (BYN)\", f\"{costs['electricity_cost']:.2f}\")\n",
        "    st.metric(\"–û—Ç–æ–ø–ª–µ–Ω–∏–µ (BYN)\", f\"{costs['heating_cost']:.2f}\")\n",
        "    st.markdown(\"**–î–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è –æ—Ç–æ–ø–ª–µ–Ω–∏—è (Gcal/–º–µ—Å)**\")\n",
        "    st.write(f\"low: {volumes['heating_Gcal_month_low']}  mid: {volumes['heating_Gcal_month_mid']}  high: {volumes['heating_Gcal_month_high']}\")\n",
        "\n",
        "# Plot cost breakdown\n",
        "st.subheader(\"–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è: —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–æ–≤\")\n",
        "plot_df = cost_df[cost_df[\"–£—Å–ª—É–≥–∞\"] != \"–ò—Ç–æ–≥–æ\"].copy()\n",
        "plot_df = plot_df.set_index(\"–£—Å–ª—É–≥–∞\")\n",
        "fig, ax = plt.subplots(figsize=(8,4))\n",
        "plot_df[\"–°—Ç–æ–∏–º–æ—Å—Ç—å (BYN)\"].astype(float).plot(kind='bar', ax=ax)\n",
        "ax.set_ylabel(\"BYN / –º–µ—Å—è—Ü\")\n",
        "ax.set_xticklabels(plot_df.index, rotation=30, ha='right')\n",
        "st.pyplot(fig)\n",
        "\n",
        "# ---- multi-record report builder ----\n",
        "if 'report' not in st.session_state:\n",
        "    st.session_state.report = []\n",
        "\n",
        "st.markdown(\"---\")\n",
        "st.subheader(\"–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—á—ë—Ç –≤ –æ—Ç—á–µ—Ç (—Å–æ–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞—Ä—Ö–µ—Ç–∏–ø–æ–≤)\")\n",
        "\n",
        "name = st.text_input(\"–ò–º—è –∑–∞–ø–∏—Å–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: Minsk - 90m¬≤ - 4pers)\", value=f\"Minsk_{int(area_m2)}m2_{occupants}occ\")\n",
        "if st.button(\"–î–æ–±–∞–≤–∏—Ç—å –≤ –æ—Ç—á–µ—Ç\"):\n",
        "    rec = {\n",
        "        \"name\": name,\n",
        "        \"area_m2\": area_m2,\n",
        "        \"adults\": adults,\n",
        "        \"children\": children,\n",
        "        \"profile\": profile,\n",
        "        \"heating_type\": heating_type,\n",
        "        \"electricity_kWh\": volumes[\"electricity_kWh\"],\n",
        "        \"water_m3\": volumes[\"water_m3\"],\n",
        "        \"heating_Gcal_mid\": volumes[\"heating_Gcal_month_mid\"],\n",
        "        \"total_BYN\": costs[\"total_monthly\"],\n",
        "        \"timestamp\": datetime.utcnow().isoformat()\n",
        "    }\n",
        "    st.session_state.report.append(rec)\n",
        "    st.success(\"–ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—Ç—á—ë—Ç\")\n",
        "\n",
        "if st.session_state.report:\n",
        "    st.markdown(\"**–û—Ç—á–µ—Ç ‚Äî —Ç–µ–∫—É—â–∏–µ –∑–∞–ø–∏—Å–∏**\")\n",
        "    report_df = pd.DataFrame(st.session_state.report)\n",
        "    st.dataframe(report_df, height=200)\n",
        "    csv = report_df.to_csv(index=False).encode('utf-8')\n",
        "    st.download_button(\"–°–∫–∞—á–∞—Ç—å CSV –æ—Ç—á–µ—Ç–∞\", data=csv, file_name=f\"utility_report_{datetime.utcnow().strftime('%Y%m%dT%H%M%SZ')}.csv\", mime=\"text/csv\")\n",
        "\n",
        "# ---- small guide / calibration ----\n",
        "st.markdown(\"---\")\n",
        "with st.expander(\"–ö–∞–∫ –æ—Ç–∫–∞–ª–∏–±—Ä–æ–≤–∞—Ç—å –º–æ–¥–µ–ª—å –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–π –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏ (5 –º–∏–Ω—É—Ç)\"):\n",
        "    st.write(\"\"\"\n",
        "    1. –í–æ–∑—å–º–∏—Ç–µ –æ–¥–Ω—É —Ä–µ–∞–ª—å–Ω—É—é –∫–≤–∏—Ç–∞–Ω—Ü–∏—é (–ø–æ–∫–≤–∞—Ä—Ç–∞–ª—å–Ω–∞—è –∏–ª–∏ –ø–æ–º–µ—Å—è—á–Ω–∞—è) –∏ –Ω–∞–π–¥–∏—Ç–µ:\n",
        "       - –æ–±—ä–µ–º —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏ (kWh) –∏–ª–∏ —Å—É–º–º—É –ø–æ —ç–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏–∏,\n",
        "       - –æ–±—ä–µ–º –≤–æ–¥—ã (m¬≥),\n",
        "       - —Å—É–º–º—É –∑–∞ –æ—Ç–æ–ø–ª–µ–Ω–∏–µ (–∏–ª–∏ –æ–±—ä–µ–º –≤ –ì–∫–∞–ª, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω).\n",
        "    2. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º—É –ø–ª–æ—â–∞–¥—å –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–∂–∏–≤–∞—é—â–∏—Ö.\n",
        "    3. –ù–∞–∂–º–∏—Ç–µ \"–î–æ–±–∞–≤–∏—Ç—å –≤ –æ—Ç—á–µ—Ç\" ‚Äî –∑–∞—Ç–µ–º —Å–∫–∞—á–∞–π—Ç–µ CSV.\n",
        "    4. –î–ª—è –ø–æ–¥–≥–æ–Ω–∫–∏: –≤—ã—á–∏—Å–ª–∏—Ç–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç scale = (—Ä–µ–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ / –º–æ–¥–µ–ª—å–Ω–∞—è —Å—É–º–º–∞).\n",
        "       - –ú–æ–∂–Ω–æ –ø—Ä–∏–º–µ–Ω–∏—Ç—å scale –∫ elec_per_person_kWh –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å elec_base_kWh / elec_per_m2_kWh.\n",
        "    5. –ü–æ—Å–ª–µ –ø–æ–¥–≥–æ–Ω–∫–∏ –º–æ–¥–µ–ª—å –¥–∞—Å—Ç –ø—Ä–æ–≥–Ω–æ–∑—ã –Ω–∞ 12 –º–µ—Å—è—Ü–µ–≤ –∏ –¥–∏–∞–ø–∞–∑–æ–Ω—ã (eco/avg/int).\n",
        "    \"\"\")\n",
        "    st.write(\"–ï—Å–ª–∏ –Ω—É–∂–Ω–æ, —è –º–æ–≥—É –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø—Ä–æ—Ü–µ–¥—É—Ä—É –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ –ø–æ –æ–¥–Ω–æ–π –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏ (–≤–∫–ª—é—á–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤).\")\n",
        "\n",
        "st.markdown(\"---\")\n",
        "st.caption(\"–†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–∞–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ '—Ç–∏–ø–æ–≤—ã—Ö –¥–æ–º–æ—Ö–æ–∑—è–π—Å—Ç–≤'. –¢–∞—Ä–∏—Ñ—ã –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –¥–ª—è –ú–∏–Ω—Å–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ Energosbyt / Minskvodokanal. –î–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–µ–ø–ª–æ–µ–≤ —Ç—Ä–µ–±—É–µ—Ç—Å—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞—Ä–∏—Ñ–Ω—ã—Ö —Ñ–æ—Ä–º—É–ª (–æ—Å–æ–±–µ–Ω–Ω–æ –¥–ª—è –æ—Ç–æ–ø–ª–µ–Ω–∏—è –∏ —Å—É–±—Å–∏–¥–∏–π).\")\n"
      ],
      "metadata": {
        "id": "HIdOLmwgcGyC"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}