# app.py
import streamlit as st
import pandas as pd
import plotly.express as px
import yaml
import os

st.set_page_config(page_title="Utility Benchmark ‚Äî –¥–∞—à–±–æ—Ä–¥", page_icon="üè†", layout="wide")

# ------------------------
# –°–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤
# ------------------------
CONFIG_DIR = "configs"
cities = [f.replace(".yaml", "") for f in os.listdir(CONFIG_DIR) if f.endswith(".yaml")]

st.sidebar.header("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥")
city = st.sidebar.selectbox("–ì–æ—Ä–æ–¥", cities)

# ------------------------
# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞
# ------------------------
with open(f"{CONFIG_DIR}/{city}.yaml", "r", encoding="utf-8") as f:
    config = yaml.safe_load(f)

# –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∞—Ä–∏—Ñ—ã, –Ω–æ—Ä–º–∞—Ç–∏–≤—ã –∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –¥–æ–º–∞
tariffs = config["tariffs"]
coeffs = config["norms"]
house_coefs = config["house_coeffs"]

# ------------------------
# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–µ–º—å–∏
# ------------------------
st.sidebar.header("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–µ–º—å–∏")
month = st.sidebar.selectbox("–ú–µ—Å—è—Ü", list(range(1,13)),
                             format_func=lambda x: ["–Ø–Ω–≤","–§–µ–≤","–ú–∞—Ä","–ê–ø—Ä","–ú–∞–π","–ò—é–Ω",
                                                    "–ò—é–ª","–ê–≤–≥","–°–µ–Ω","–û–∫—Ç","–ù–æ—è","–î–µ–∫"][x-1])
area_m2 = st.sidebar.number_input("–ü–ª–æ—â–∞–¥—å, –º¬≤", 10.0, 500.0, 90.0)
adults = st.sidebar.number_input("–í–∑—Ä–æ—Å–ª—ã–µ", 0,10,2)
children = st.sidebar.number_input("–î–µ—Ç–∏", 0,10,1)
occupants = adults + children

scenario_options = {"–≠–∫–æ–Ω–æ–º–Ω—ã–π": 0.85, "–°—Ä–µ–¥–Ω–∏–π": 1.0, "–†–∞—Å—Ç–æ—á–∏—Ç–µ–ª—å–Ω—ã–π": 1.25}
scenario = st.sidebar.selectbox("–°—Ü–µ–Ω–∞—Ä–∏–π –ø–æ–≤–µ–¥–µ–Ω–∏—è", list(scenario_options.keys()), index=1)
behavior_factor = scenario_options[scenario]

house_category = st.sidebar.selectbox("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ–º–∞", list(house_coefs.keys()), index=1)

# ------------------------
# –õ—å–≥–æ—Ç–∞
# ------------------------
st.sidebar.markdown("---")
use_subsidy = st.sidebar.checkbox("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—É–±—Å–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–∞—Ä–∏—Ñ")
if use_subsidy:
    subsidy_rate = st.sidebar.slider("–î–æ–ª—è –æ—Ç –ø–æ–ª–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞", 0.0, 1.0, 0.85, 0.05)  # –ø—Ä–∏–º–µ—Ä 0.85
else:
    subsidy_rate = 1.0

# ------------------------
# –†–∞—Å—á—ë—Ç–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (–ø—Ä–∏–º–µ—Ä)
# ------------------------
def calculate_volumes(area_m2, occupants, behavior_factor, coeffs=coeffs, month=1):
    elec = (coeffs["elec_base_kWh"] + coeffs["elec_per_person_kWh"]*occupants +
            coeffs["elec_per_m2_kWh"]*area_m2) * behavior_factor
    water = coeffs["water_per_person_m3"]*occupants*behavior_factor
    hot_water = water * coeffs["hot_water_fraction"]
    sewage = water
    HEATING_MONTHS = [1,2,3,4,10,11,12]
    if month in HEATING_MONTHS:
        G_mid = coeffs["heating_Gcal_per_m2_season_mid"] * area_m2
        heat_monthly = G_mid / coeffs["heating_season_months"]
    else:
        heat_monthly = 0.0
    return {
        "–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è": round(elec,1),
        "–í–æ–¥–∞": round(water,2),
        "–ì–æ—Ä—è—á–∞—è –≤–æ–¥–∞": round(hot_water,2),
        "–ö–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è": round(sewage,2),
        "–û—Ç–æ–ø–ª–µ–Ω–∏–µ": round(heat_monthly,3)
    }

def calculate_costs_from_volumes(volumes, tariffs, area_m2=50, occupants=1):
    elec_cost = volumes["–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è"] * tariffs["electricity_BYN_per_kWh"] * subsidy_rate
    water_cost = volumes["–í–æ–¥–∞"] * tariffs["water_BYN_per_m3"]
    sewage_cost = volumes["–ö–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è"] * tariffs["sewage_BYN_per_m3"]
    heat_cost = volumes["–û—Ç–æ–ø–ª–µ–Ω–∏–µ"] * tariffs["heating_BYN_per_Gcal"] * subsidy_rate
    fixed = tariffs["fixed_fees_BYN"]
    costs = {
        "–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–∏—è": round(elec_cost,2),
        "–í–æ–¥–∞": round(water_cost,2),
        "–ö–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è": round(sewage_cost,2),
        "–û—Ç–æ–ø–ª–µ–Ω–∏–µ": round(heat_cost,2),
        "–§–∏–∫—Å. –ø–ª–∞—Ç–µ–∂–∏": round(fixed,2)
    }
    costs["–ò—Ç–æ–≥–æ"] = round(sum(costs.values()),2)
    return costs

# ------------------------
# –ü—Ä–∏–º–µ—Ä —Ä–∞—Å—á—ë—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# ------------------------
ideal_vol = calculate_volumes(area_m2, occupants, 1.0, month=month)
ideal_costs = calculate_costs_from_volumes(ideal_vol, tariffs)

st.header(f"üè† –†–∞—Å—á—ë—Ç –∫–æ–º–º—É–Ω–∞–ª—å–Ω—ã—Ö —É—Å–ª—É–≥ –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city}")
st.write("–ò–¥–µ–∞–ª—å–Ω—ã–π —Ä–∞—Å—á—ë—Ç –ø–æ –Ω–æ—Ä–º–∞—Ç–∏–≤–∞–º:", ideal_costs)

